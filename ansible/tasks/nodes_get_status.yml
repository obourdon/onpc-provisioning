# Ironic nodes status retrieval task
---
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- fail: msg="Node name can not be empty"
  when: node_name is defined and node_name | length == 0

- name: Getting status from register-helper utility agent (by count)
  uri:
    url: "http://{{ registration_ip }}:{{ registration_port }}/{{ status_uri }}"
    force_basic_auth: yes
    user: "{{ clouds.get('clouds', {}).get('bifrost-admin', {}).get('auth', {}).get('username', '') }}"
    password: "{{ clouds.get('clouds', {}).get('bifrost-admin', {}).get('auth', {}).get('password', '') }}"
  register: tmp_registered_status
  until: (tmp_registered_status.content_length | int > 3) and (tmp_registered_status.get('json', {}).keys() | length >= nodes_nb | default(1))
  delay: "{{ node_status_delay | default(15) }}"
  retries: "{{ node_status_retries | default(8) }}"
  when: node_name is undefined

- name: Storing status result (by count)
  set_fact:
    registered_status: "{{ tmp_registered_status }}"
  when: not tmp_registered_status.get('skipped', False)

- name: Getting status from register-helper utility agent (by name)
  uri:
    url: "http://{{ registration_ip }}:{{ registration_port }}/{{ status_uri }}"
    force_basic_auth: yes
    user: "{{ clouds.get('clouds', {}).get('bifrost-admin', {}).get('auth', {}).get('username', '') }}"
    password: "{{ clouds.get('clouds', {}).get('bifrost-admin', {}).get('auth', {}).get('password', '') }}"
  register: tmp_registered_status
  until: (tmp_registered_status.content_length | int > 3) and (tmp_registered_status.get('json', {}).keys() | select('match', node_name) | list | length >= 1)
  delay: "{{ node_status_delay | default(15) }}"
  retries: "{{ node_status_retries | default(8) }}"
  when: node_name is defined

- name: Storing status result (by name)
  set_fact:
    registered_status: "{{ tmp_registered_status }}"
  when: not tmp_registered_status.get('skipped', False)

- name: Fetching detailed informations from register-helper utility agent
  uri:
    url: "http://{{ registration_ip }}:{{ registration_port }}/{{ details_uri }}"
    force_basic_auth: yes
    user: "{{ clouds.get('clouds', {}).get('bifrost-admin', {}).get('auth', {}).get('username', '') }}"
    password: "{{ clouds.get('clouds', {}).get('bifrost-admin', {}).get('auth', {}).get('password', '') }}"
    status_code: 200
  register: registered_machines
