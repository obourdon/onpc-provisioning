# Ironic Introspection Rules configuration task
---
- name: Looking Up Current Introspection Rules
  command: "bash -c '. ~{{ systemuser }}/.venv/bifrost/bin/activate && . ~{{ systemuser }}/openrc bifrost-admin && openstack baremetal introspection rule list -f value'"
  register: current_ironic_rules

- name: Trying To Match Rule Description
  set_fact:
    matching_rule: "{{ current_ironic_rules.stdout_lines | select('match', '^[0-9a-f-]{36} ' ~ description ~ '$') | list }}"
  when: current_ironic_rules is defined and current_ironic_rules.stdout_lines is defined

- name: Creating temporary file for {{ name }}
  tempfile:
    state: file
    suffix: .json
  register: tempfile
  when: matching_rule is defined and matching_rule | length == 0

- name: Creating Introspection Rule File for {{ name }}
  copy:
    content: "{{ lookup('template', template) | from_yaml | to_json }}"
    dest: "{{ tempfile['path'] }}"
  when: matching_rule is defined and matching_rule | length == 0

#- name: Storing Introspection Rule File contents for {{ name }}
#  block:
#    - name: Sorting JSON content
#      command: "bash -c 'cat {{ tempfile['path'] }} | jq -S .'"
#      register: new_rule_contents
#    - name: Storing Rule Content in set_fact
#      set_fact:
#        new_rule_json: "{{ new_rule_contents.stdout | from_json }}"

#- debug: msg="Can not handle multiple matches"
#  when: matching_rule is defined and matching_rule | length > 1

#- name: Extracting Existing Introspection Rule
#  block:
#    - name: Extracting UUID of matched rule
#      set_fact:
#        rule_uuid: "{{ matching_rule[0].split(' ')[0] }}"
#    - name: Retrieving current rule contents removing the UUID part
#      command: "bash -c '. ~{{ systemuser }}/.venv/bifrost/bin/activate && . ~{{ systemuser }}/openrc bifrost-admin && openstack baremetal introspection rule show {{ rule_uuid }} -f json | jq -S del\\(.uuid\\)'"
#      register: existing_ironic_rule
#    - name: Storing Comparison State in set_fact
#      set_fact:
#        rule_already_exists: "{{ new_rule_json == (existing_ironic_rule.stdout | from_json) }}"
#    - debug: msg="OLIVIER {{ rule_already_exists }} {{ new_rule_json }} vs {{ existing_ironic_rule.stdout | from_json }}"
#  when: matching_rule is defined and matching_rule | length == 1

- name: Registering Introspection Rule for {{ name }}
  command: "bash -c '. ~{{ systemuser }}/.venv/bifrost/bin/activate && . ~{{ systemuser }}/openrc bifrost-admin && openstack baremetal introspection rule import {{ tempfile['path'] }} -f value'"
  register: cmd_res
  when: matching_rule is defined and matching_rule | length == 0

- name: Cleaning up {{ name }} temporary file
  file:
    path: "{{ tempfile['path'] }}"
    state: absent
  when: matching_rule is defined and matching_rule | length == 0
