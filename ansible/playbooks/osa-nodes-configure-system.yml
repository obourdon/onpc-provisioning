---
- hosts: infra-master

  pre_tasks:

    - name: Verifying Ansible meets version requirements
      assert:
        that: "ansible_version.full is version_compare('2.5', '>=')"
        msg: >
          "You must update Ansible to at least 2.5 (current is {{ ansible_version.full }})"

    - name: Retrieving facts
      setup:

    - name: Setting facts
      set_fact:
        infra_master_ip: "{{ hostvars.get('infra-master', {}).get('ansible_local', {}).get('opennext_infra_master_create_osa_nodes', {}).keys()[0]}}"

    - name: Setting facts
      set_fact:
        osa_node_ips: "{{ hostvars.get('infra-master', {}).get('ansible_local', {}).get('opennext_infra_master_create_osa_nodes', {}).get(infra_master_ip, {}).get('node_ips', []) }}"

- hosts: osa-nodes,osa-master
  become: yes

  vars_files:
    - ../vars/infra-master-configure-system_vars.yml
    - ../vars/infra-master-deploy-bifrost_vars.yml
    - ../vars/slaves-pkgs-ubuntu.yml
    - ../vars/osa-briges-vlans_vars.yml
    - ../vars/osa-disks-partitions_vars.yml

  tasks:

    - name: Setting facts
      set_fact:
        ip_prefixes: "{{ hostvars.get('infra-master', {}).get('ansible_local', {}).get('opennext_infra_master_configure_system', {}).values() | selectattr('ip_prefix', 'defined') | map(attribute='ip_prefix') | list | unique }}"
        root_ssh_dir: "{{ root_dot_ssh_dir | default('/root/.ssh') }}"
        is_aio: "{{ hostvars.get('infra-master', {}).get('groups', {}).get('osa-nodes', []) | length == 1 | bool }}"
        osa_master_is_also_osa_node: "{{ osa_master_runs_on_osa_node | default(false ) | bool }}"

    - fail: msg="Missing ip_prefix information"
      when: ip_prefixes | length != 1

    - name: Setting facts
      set_fact:
        ip_prefix: "{{ ip_prefixes[0] }}"
        fqdn: "{{ inventory_hostname }}.openstack.local"

    - name: Checking dynamic hostname
      command: "hostname"
      changed_when: false
      register: hostname_result

    - name: Updating /etc/hosts with {{ fqdn }}
      replace:
        path: /etc/hosts
        regexp: '(\s+)ubuntu(\s+.*)?$'
        replace: '\1{{ fqdn }} {{ inventory_hostname }} ubuntu\2'
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and hostname_result.stdout != fqdn

    - name: Changing dynamic hostname to {{ fqdn }}
      command: "hostname {{ fqdn }}"
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and hostname_result.stdout != fqdn

    - name: Updating /etc/hosts with {{ fqdn }}
      replace:
        path: /etc/hosts
        regexp: '(\s+){{ fqdn }} {{ inventory_hostname }} ubuntu(\s+.*)?$'
        replace: '\1{{ fqdn }} {{ inventory_hostname }}\2'
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and hostname_result.stdout != fqdn

    - name: Updating /etc/hostname with {{ fqdn }}
      replace:
        path: /etc/hostname
        regexp: '^ubuntu$'
        replace: '{{ fqdn }}'
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and hostname_result.stdout != fqdn

    - name: Setting proper perms on {{ systemuser }} .ssh
      file:
        path: "{{ systemuserhome }}/.ssh"
        mode: 0700
        owner: "{{ systemuser }}"
        group: "{{ systemuser }}"
        state: directory
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Creating root .ssh
      file:
        path: "{{ root_ssh_dir }}"
        mode: 0700
        owner: "root"
        group: "root"
        state: directory
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Configuring SSH defaults for root
      template:
        src: ../templates/ssh_cfg.j2
        dest: "{{ root_ssh_dir }}/config"
        owner: "root"
        group: "root"
        mode: 0644
      vars:
        ips: "{{ hostvars.get('infra-master', {}).get('osa_node_ips', []) }}"
        vlans: "{{ osa_vlans | map(attribute='prefix') | flatten | list }}"
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Copy {{ systemuser }} private SSH key file to root
      copy:
        src: "{{ lookup('fileglob', systemuserhome + '/.ssh/id_rsa') }}"
        dest: "{{ root_ssh_dir }}"
        owner: "root"
        group: "root"
        mode: 0600
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Copy {{ systemuser }} public SSH key file to root from {{ systemuserhome }})
      copy:
        src: "{{ lookup('fileglob', systemuserhome + '/.ssh/id_rsa.pub') }}"
        dest: "{{ root_ssh_dir }}"
        owner: "root"
        group: "root"
        mode: 0644
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Copy {{ systemuser }} authorized keys file to root from {{ systemuserhome }})
      copy:
        src: "{{ lookup('fileglob', systemuserhome + '/.ssh/authorized_keys') }}"
        dest: "{{ root_ssh_dir }}"
        owner: "root"
        group: "root"
        mode: 0644
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Configuring SSH defaults for {{ systemuser }}
      template:
        src: ../templates/ssh_cfg.j2
        dest: "{{ systemuserhome }}/.ssh/config"
        owner: "{{ systemuser }}"
        group: "{{ systemuser }}"
        mode: 0644
      vars:
        ips: "{{ hostvars.get('infra-master', {}).get('osa_node_ips', []) }}"
        vlans: "{{ osa_vlans | map(attribute='prefix') | flatten | list }}"
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Copy {{ systemuser }} private SSH key file
      copy:
        src: "{{ lookup('fileglob', systemuserhome + '/.ssh/id_rsa') }}"
        dest: "{{ systemuserhome }}/.ssh"
        owner: "{{ systemuser }}"
        group: "{{ systemuser }}"
        mode: 0600
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Copy {{ systemuser }} public SSH key file
      copy:
        src: "{{ lookup('fileglob', systemuserhome + '/.ssh/id_rsa.pub') }}"
        dest: "{{ systemuserhome }}/.ssh"
        owner: "{{ systemuser }}"
        group: "{{ systemuser }}"
        mode: 0644
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Setting environment facts
      set_fact:
        proxy_env: {
          'http_proxy': "http://{{ proxy_host }}:{{ proxy_port | default(3128) }}",
          'https_proxy': "http://{{ proxy_host }}:{{ proxy_port | default(3128) }}",
          'ftp_proxy': "http://{{ proxy_host }}:{{ proxy_port | default(3128) }}",
          'no_proxy': 'localhost,127.0.0.1',
        }
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and proxy_host is defined

    - name: Saving working initramdisk
      copy:
        src: "/boot/initrd.img-{{ ansible_kernel }}"
        dest: "/boot/initrd.img-{{ ansible_kernel }}-OK"
        force: no
        remote_src: yes

    - name: Remove known problem packages
      package:
        name: "{{ prohibited_systempkgs }}"
        state: absent
      environment: "{{ proxy_env | default('{}') }}"
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and prohibited_systempkgs is defined and prohibited_systempkgs | length > 0

    - name: Verifying all mandatory packages
      package:
        name: "{{ systempkgs | sort }}"
        state: latest
      environment: "{{ proxy_env | default('{}') }}"
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Copying modifed initramdisk
      copy:
        src: "/boot/initrd.img-{{ ansible_kernel }}"
        dest: "/boot/initrd.img-{{ ansible_kernel }}-BAD"
        force: no
        remote_src: yes

    - name: Restoring working initramdisk
      copy:
        src: "/boot/initrd.img-{{ ansible_kernel }}-OK"
        dest: "/boot/initrd.img-{{ ansible_kernel }}"
        force: yes
        remote_src: yes

    - include_tasks: ../tasks/kernel_drivers_modules.yml module={{ item }}
      with_items:
        - "bonding"
        - "bridge"
        - "br_netfilter"
        - "8021q"
        - "vxlan"
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Configuring IP forwarding via sysctl
      sysctl:
        name: "net.ipv4.ip_forward"
        value: 1
        sysctl_set: yes
        state: present
        reload: yes
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Configuring Bridges for proper VLAN support via sysctl
      sysctl:
        name: "{{ item }}"
        value: 0
        sysctl_set: yes
        state: present
        reload: yes
      with_items:
        - net.bridge.bridge-nf-call-ip6tables
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-arptables
        - net.bridge.bridge-nf-filter-pppoe-tagged
        - net.bridge.bridge-nf-filter-vlan-tagged
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Setting facts for NTP daemon configuration
      set_fact:
          ntp_daemon_conf_line: "server {{ proxy_host }}"
          ntp_daemon_conf_file: "/etc/ntp.conf"
          ntp_date_conf_line: "NTPSERVERS=\"{{ proxy_host }}\""
          ntp_date_conf_file: "/etc/default/ntpdate"

    - name: Configuring NTP daemon (removing default pools)
      replace:
        path: "{{ ntp_daemon_conf_file }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - { regexp: '^pool (.*)', line: '#pool \1' }
      notify:
        - restart ntp and stop systemd-timesyncd
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Retrieving remote NTP daemon configuration
      slurp:
        src: "{{ ntp_daemon_conf_file }}"
      register:
        ntp_daemon_info

    - name: Configuring NTP daemon (inserting infra-master as NTP server)
      replace:
        path: "{{ ntp_daemon_conf_file }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - { regexp: '^(.*) ntp server as a fallback\.$', line: '# Custom ntp server list\n{{ ntp_daemon_conf_line }}\n\1 ntp server as a fallback.' }
      notify:
        - restart ntp and stop systemd-timesyncd
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and not (ntp_daemon_info['content'] | b64decode is search (ntp_daemon_conf_line))

    - name: Retrieving remote NTP date configuration
      slurp:
        src: "{{ ntp_date_conf_file }}"
      register:
        ntp_date_info

    - name: Configuring NTP date (inserting infra-master as NTP server)
      replace:
        path: "{{ ntp_date_conf_file }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - { regexp: '^NTPSERVERS=".*', line: '{{ ntp_date_conf_line }}' }
      notify:
        - restart ntp and stop systemd-timesyncd
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and not (ntp_date_info['content'] | b64decode is search (ntp_date_conf_line))

    - name: Getting interfaces infos
      interfaces_file:
      register: cur_interfaces
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Moving loopback interface to its own config file
      interfaces_file:
        src: /etc/network/interfaces
        dest: /etc/network/interfaces.d/lo.cfg
        iface: lo
        state: move
      register: lo_changed
      when: "(not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and 'lo' in cur_interfaces.get('ifaces', {})"

    - import_tasks: ../tasks/select_network_interfaces_type.yml
      vars:
        itf_type: "ether"

    - import_tasks: ../tasks/filter_network_interfaces_name.yml
      vars:
        itf_reject_name: "virbr.*|.*\\.[1-9][0-9]*"

    - import_tasks: ../tasks/select_network_interfaces_state.yml
      vars:
        itf_state: true

    - import_tasks: ../tasks/select_network_interfaces_address.yml
      vars:
        itf_address: "{{ ansible_host }}"

    - name: Setting matching ethernet network interfaces list
      set_fact:
        matching_ether_itfs: "{{ itfs[0].get('device','') }}"

    - name: Moving {{ matching_ether_itfs }} primary ethernet interface to its own config file
      interfaces_file:
        src: /etc/network/interfaces
        dest: "/etc/network/interfaces.d/{{ matching_ether_itfs }}.cfg"
        iface: "{{ matching_ether_itfs }}"
        state: move
      register: primary_changed
      when: "(not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and matching_ether_itfs in cur_interfaces.get('ifaces', {})"

    - name: Bringing down interface and dhcpclient for proper bridging
      set_fact:
        primary_itf_down: "pkill dhclient ; ip addr flush {{ matching_ether_itfs }} ; "
      when: "(not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and matching_ether_itfs in cur_interfaces.get('ifaces', {})"

    - name: Setting remaining interfaces list
      set_fact:
        remaining_itfs: "{{ cur_interfaces.get('ifaces', {}).keys() | difference(['lo', matching_ether_itfs]) }}"
      when: not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master'

    - name: Moving {{ remaining_itfs[0] }} secondary ethernet interface to its own config file
      interfaces_file:
        src: /etc/network/interfaces
        dest: "/etc/network/interfaces.d/{{ remaining_itfs[0] }}.cfg"
        iface: "{{ remaining_itfs[0] }}"
        state: move
        method: manual
      register: secondary_changed
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and remaining_itfs | length > 0

    - name: Bringing down interface and dhcpclient for proper bridging
      set_fact:
        secondary_itf_down: "pkill dhclient ; ip addr flush {{ remaining_itfs[0] }} ; "
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and remaining_itfs | length > 0

    - name: Configuring {{ remaining_itfs[0] }} VLANs and bridges
      template:
        src: ../templates/bridge_vlans_itf_cfg.j2
        dest: "/etc/network/interfaces.d/{{ remaining_itfs[0] }}.cfg"
        owner: root
        group: root
        mode: 0644
      register: vlan_changed
      when: (not (is_aio or osa_master_is_also_osa_node) or inventory_hostname != 'osa-master') and remaining_itfs | length > 0 and (not is_aio or (force_bridges | default(false) | bool))
      vars:
        - prov_itf: "{{ remaining_itfs[0] }}"
        - vlans_list: "{{ osa_vlans | default([]) }}"
        - ip_suffix: "{{ ansible_host.split('.')[-1] }}"

    - name: Set fact for conditional execution
      set_fact:
        network_reconfig: True
      when: ((lo_changed is defined and lo_changed.changed) or
             (primary_changed is defined and primary_changed.changed) or
             (secondary_changed is defined and secondary_changed.changed) or
             (vlan_changed is defined and vlan_changed.changed))

    - name: Disabling existing services for DIB dhcp-all-interfaces
      shell: systemctl list-unit-files | grep dhcp-interface | sed -e 's/^.*dhcp/dhcp/' | sed -e 's/  *.*//' -e 's/^/systemctl disable -q --force /' | bash
      ignore_errors: true
      changed_when: false

    - name: Disabling existing services for DIB dhcp-all-interfaces
      shell: systemctl list-units | grep dhcp-interface | sed -e 's/^.*dhcp/dhcp/' | sed -e 's/  *.*//' -e 's/^/systemctl disable -q --force /' | bash
      ignore_errors: true
      changed_when: false

    - name: Stopping existing services for DIB dhcp-all-interfaces
      shell: systemctl list-units | grep dhcp-interface | sed -e 's/^.*dhcp/dhcp/' | sed -e 's/  *.*//' -e 's/^/systemctl stop -q --force /' | bash
      ignore_errors: true
      changed_when: false

    - name: Removing DIB dhcp-all-interfaces udev item {{ item }}
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /usr/lib/systemd/system/dhcp-interface@.service
        - /etc/udev/rules.d/99-dhcp-all-interfaces.rules
        - /usr/local/sbin/dhcp-all-interfaces.sh
      register: removed_udev_rules

    - name: Restarting udev service
      shell: "udevadm control --reload-rules && udevadm trigger"
      when: removed_udev_rules is changed

    - name: Restarting network services
      shell: echo "{{ primary_itf_down | default('') }}{{ secondary_itf_down | default('') }}service networking restart" | at now + 0 min
      when: network_reconfig is defined and network_reconfig

    - name: Wait for server come back
      wait_for: >
        host="{{ hostvars.get(inventory_hostname, {}).get('ansible_host') }}"
        port=22
        delay=10
        timeout=60
      delegate_to: localhost
      become: no
      when: network_reconfig is defined and network_reconfig

    - name: Creating mandatory directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "/openstack"
      when: not (is_aio or osa_master_is_also_osa_node) and inventory_hostname != 'osa-master'

    - include_tasks: ../tasks/disk_partitions.yml
      vars:
        disk_setup: "{{ disk_item }}"
      with_items: "{{ osa_disks }}"
      loop_control:
        loop_var: disk_item
      when: not (is_aio or osa_master_is_also_osa_node) and inventory_hostname != 'osa-master'

    - include_tasks: ../tasks/cinder_loopback.yml
      when: not (is_aio or osa_master_is_also_osa_node) and inventory_hostname != 'osa-master'

    - include_tasks: ../tasks/store_facts.yml facts_file="opennext_osa_nodes_configure_system"
      vars:
        keys_to_store:
          - "^cur_interfaces$"
          - "^matching_ether_itfs$"
          - "^remaining_itfs$"
          - "^osa_vlans$"
          - "^ansible_all_ipv4_addresses$"
          - "^ansible_default_ipv4$"
          - "^ansible_dns$"
          - "^ansible_interfaces$"
          - "^.*libvirt_networks"
          - "^groups$"
          - "^inventory_hostname$"

  handlers:
    - name: restart ntp and stop systemd-timesyncd
      service: name={{ item.name }} state={{ item.state }}
      with_items:
        - { name: ntp, state: restarted }
        - { name: systemd-timesyncd, state: stopped }

- hosts: infra-master
  become: yes

  tasks:

    - include_tasks: ../tasks/store_facts.yml facts_file="opennext_osa_nodes_configure_system"
      vars:
        keys_to_store:
          - "^cur_interfaces$"
          - "^matching_ether_itfs$"
          - "^remaining_itfs$"
          - "^osa_vlans$"
          - "^ansible_all_ipv4_addresses$"
          - "^ansible_default_ipv4$"
          - "^ansible_dns$"
          - "^ansible_interfaces$"
          - "^.*libvirt_networks"
          - "^groups$"
          - "^inventory_hostname$"
