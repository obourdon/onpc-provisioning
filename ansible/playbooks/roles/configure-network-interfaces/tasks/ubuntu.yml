# Tasks for configuring network interfaces on Ubuntu
---
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- fail: msg="Missing, empty or bad node_type variable"
  when: node_type is undefined or node_type | length == 0 or node_type not in ['osa-nodes', 'infra-master']

- name: Getting interfaces infos
  interfaces_file:
  register: itfs_to_be_handled
  when: is_host_to_be_modified

- name: Setting facts for primary interface IP retrieval (primary-prefix)
  set_fact:
    match_ip_prefix: "{{ primary_itf_prefix }}"
  when: is_host_to_be_modified and primary_itf_prefix is defined and primary_itf_prefix | length > 0

- name: Setting facts for primary interface IP retrieval (ip-prefix)
  set_fact:
    match_ip_prefix: "{{ hostvars[inventory_hostname]['ip_prefix'] }}"
  when: is_host_to_be_modified and primary_itf_prefix is undefined or primary_itf_prefix | length == 0

- fail: msg="Missing or empty match_ip_prefix variable"
  when: match_ip_prefix is undefined or match_ip_prefix | length == 0

- name: Setting facts for non-handled network interfaces
  set_fact:
    primary_net_itf: "{% set sel = [] %}{% for k in ansible_interfaces %}{% if hostvars.get(inventory_hostname, {}).get('ansible_' + k | replace('-', '_'), {}).get('ipv4', {}).get('address', '') is match(match_ip_prefix + '.*') %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
    secondary_net_itfs: "{% set sel = [] %}{% for k in itfs_to_be_handled.get('ifaces', {}).keys() %}{% if k != 'lo' and not hostvars.get(inventory_hostname, {}).get('ansible_' + k | replace('-', '_'), {}).get('ipv4', {}).get('address', '') is match(match_ip_prefix + '.*') %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
    itfs_names_to_be_handled: "{{ itfs_to_be_handled.get('ifaces', {}).keys() }}"
  when: is_host_to_be_modified

- name: Setting facts for node roles (osa-nodes)
  set_fact:
    node_roles: "{{ hostvars.get('infra-master', {}).get('osa_nodes_roles', {}).get(inventory_hostname, []) }}"
  when: is_host_to_be_modified and node_type == 'osa-nodes'

- name: Setting facts for node roles (infra-master)
  set_fact:
    node_roles: ["infra-master"]
  when: is_host_to_be_modified and node_type == 'infra-master'

- name: Retrieving handled interfaces files
  find:
    paths: "/etc/network/interfaces.d"
    patterns: '^.*\.cfg$'
    use_regex: yes
  register: handled_itfs_files
  when: is_host_to_be_modified

- name: Retrieving handled interfaces informations
  interfaces_file:
    dest: "{{ item }}"
  register: handled_itfs_infos
  with_items: "{{ handled_itfs_files.get('files', []) | selectattr('path', 'defined') | map(attribute='path') | list }}"
  when: is_host_to_be_modified

- name: Setting handled interfaces list
  set_fact:
    handled_itfs: "{{ handled_itfs_infos.results | json_query('[*].ifaces | flatten_dict_entries(@) | keys(@)') }}"
  when: is_host_to_be_modified

- name: Setting fact for non-handled network interfaces
  set_fact:
    unhandled_itfs: "{{ ansible_interfaces | difference(primary_net_itf + secondary_net_itfs + handled_itfs) | reject('match', '^bond.*') | reject('match', '^virbr.*-nic$') | list }}"
  when: is_host_to_be_modified

- name: Removing already handled interfaces and bridges
  set_fact:
    unhandled_itfs: "{% set sel = [] %}{% for k in unhandled_itfs %}{% set itf = hostvars.get(inventory_hostname, {}).get('ansible_' + k | replace('-', '_'), {}) %}{% if itf.get('type', '') == 'ether' and k.split('.')[0] not in handled_itfs %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
  when: is_host_to_be_modified

- name: Adding non-handled network interfaces in original network configuration file
  interfaces_file:
    iface: "{{ item }}"
    state: present
    backup: yes
    backupdir: /etc/network/backup.d
  with_items: "{{ unhandled_itfs }}"
  when: is_host_to_be_modified and unhandled_itfs | length > 0

- block:
    - name: Reading interfaces infos again
      interfaces_file:
      register: itfs_to_be_handled
    - name: Setting facts after reading again
      set_fact:
        itfs_names_to_be_handled: "{{ itfs_to_be_handled.get('ifaces', {}).keys() }}"
  when: is_host_to_be_modified and unhandled_itfs | length > 0

- name: Moving loopback ethernet interface to its own config file
  interfaces_file:
    src: /etc/network/interfaces
    dest: "/etc/network/interfaces.d/{{ item }}.cfg"
    iface: "{{ item }}"
    state: move
    backup: yes
    backupdir: /etc/network/backup.d
  register: loopback_changed
  when: is_host_to_be_modified and 'lo' in itfs_names_to_be_handled
  with_items: ['lo']

- name: Moving primary interfaces to its own config file
  interfaces_file:
    src: /etc/network/interfaces
    dest: "/etc/network/interfaces.d/{{ item }}.cfg"
    iface: "{{ item }}"
    state: move
    backup: yes
    backupdir: /etc/network/backup.d
  register: primary_changed
  when: is_host_to_be_modified and primary_net_itf | length == 1 and primary_net_itf[0] in itfs_names_to_be_handled
  with_items: "{{ primary_net_itf }}"

- name: Migrating primary interfaces to bridge
  interfaces_file:
    dest: "/etc/network/interfaces.d/{{ item }}.cfg"
    iface: "{{ item }}"
    state: bridge
    bridge_options:
      - { name: "{{ primary_bridge_name }}" }
      - { bridge_maxwait: 5 }
      - { bridge_stp: "off" }
      - { bridge_fd: 0 }
      - { bridge_waitport: 0 }
    backup: yes
    backupdir: /etc/network/backup.d
  register: primary_bridge_changed
  when: is_host_to_be_modified and primary_net_itf | length == 1 and primary_bridge_name is defined and primary_changed is defined and primary_changed.changed
  with_items: "{{ primary_net_itf }}"

- name: Setting fact for primary interface name
  set_fact:
    primary_itf_name: "{{ primary_net_itf[0] }}"
  when: is_host_to_be_modified and primary_net_itf | length == 1 and primary_net_itf[0] in itfs_names_to_be_handled

- name: Keeping reference file for primary interface
  copy:
    src: "/etc/network/interfaces.d/{{ primary_itf_name }}.cfg"
    dest: "/etc/network/{{ primary_net_itf[0] }}.ref"
    remote_src: yes
    force: no
  when: is_host_to_be_modified and primary_net_itf | length == 1 and primary_net_itf[0] in itfs_names_to_be_handled

- name: Retrieving in which file primary interface is defined
  set_fact:
    primary_itf_name: "{% set sel = [] %}{% for itf in handled_itfs_infos.get('results', []) %}{% if primary_net_itf[0] in itf.get('ifaces', {}).keys() %}{% set l = sel.append(itf.get('dest', '')) %}{% endif %}{% endfor %}{{ sel[0].split('/')[-1] | replace('.cfg', '') }}"
  when: is_host_to_be_modified and primary_net_itf | length == 1 and primary_net_itf[0] not in itfs_names_to_be_handled

- name: Retrieving primary interfaces infos
  interfaces_file:
    dest: "/etc/network/{{ primary_itf_name }}.ref"
  register: primary_itf_infos
  when: is_host_to_be_modified and primary_net_itf | length == 1

- name: Retrieving primary interfaces file content
  slurp:
    src: "/etc/network/{{ primary_itf_name }}.ref"
  register: primary_itf_file_content
  when: is_host_to_be_modified and primary_net_itf | length == 1

- name: Setting facts for primary interface
  set_fact:
    primary_itf_blob: "{{ primary_itf_file_content['content'] | b64decode }}"
    primary_itf_prov_itf: "{% set sel = [] %}{% for k,v in primary_itf_infos.get('ifaces', {}).items() %}{% if v.get('method', '') != 'manual' %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
    primary_itf_orig_prov_itf: "{% set sel = [] %}{% for k,v in primary_itf_infos.get('ifaces', {}).items() %}{% if v.get('method', '') == 'manual' %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
  when: is_host_to_be_modified and primary_net_itf | length == 1

- name: Setting facts for primary interface
  set_fact:
    primary_itf_orig_prov_itf: "{{ primary_itf_prov_itf }}"
  when: is_host_to_be_modified and primary_net_itf | length == 1 and primary_itf_orig_prov_itf | length == 0

- name: Setting fact for handled network interfaces become secondary interfaces
  set_fact:
    secondary_net_itfs: "{{ handled_itfs | difference( primary_net_itf + ['lo']) }}"
  when: is_host_to_be_modified and secondary_net_itfs | length == 0

- name: Setting fact for non-handled network interfaces become secondary interfaces
  set_fact:
    secondary_net_itfs: "{{ unhandled_itfs }}"
  when: is_host_to_be_modified and secondary_net_itfs | length == 0

- name: Moving secondary ethernet interfaces to their own config file and update them from dhcp to manual
  interfaces_file:
    src: /etc/network/interfaces
    dest: "/etc/network/interfaces.d/{{ item }}.cfg"
    iface: "{{ item }}"
    state: move
    method: manual
    backup: yes
    backupdir: /etc/network/backup.d
  register: secondary_changed
  when: is_host_to_be_modified and secondary_net_itfs | length > 0
  with_items: "{{ secondary_net_itfs | intersect(itfs_names_to_be_handled) }}"

- name: Getting informations about /etc/network/interfaces file
  stat:
    path: "/etc/network/interfaces"
  register: itf_file_status

- name: Getting interfaces files last modification dates and last reboot time
  set_fact:
    last_itfs_files_mod: "{{ ((handled_itfs_files | default({})).get('files', {}) | selectattr('mtime', 'defined') | map(attribute='mtime') | list + [itf_file_status.get('stat', {}).get('mtime')]) | map('regex_replace', '([^.]*)\\..*', '\\1') | list | max | int }}"
    last_reboot_time: "{{ ansible_date_time.epoch | int - ansible_uptime_seconds }}"

- fail: msg='No primary network interface detected'
  when: is_host_to_be_modified and primary_net_itf | length == 0

- fail: msg='No secondary network interface detected'
  when: is_host_to_be_modified and secondary_net_itfs | length == 0

- name: Setting facts for VLANs network interfaces
  set_fact:
    mgmt_net_itf: "{{ primary_itf_name }}"
  when: is_host_to_be_modified and primary_net_itf | length > 0

- name: Setting facts for VLANs network interfaces
  set_fact:
    storage_net_itf: "{{ secondary_net_itfs[0] }}"
    vxlan_net_itf: "{{ secondary_net_itfs[0] }}"
    vlan_net_itf: "{{ secondary_net_itfs[0] }}"
  when: is_host_to_be_modified and secondary_net_itfs | length > 0 and node_type == 'osa-nodes'

- name: Setting facts for VLANs network interfaces
  set_fact:
    prov_net_itf: "{{ secondary_net_itfs[0] }}"
    kvm_net_itf: "{{ secondary_net_itfs[0] }}"
  when: is_host_to_be_modified and secondary_net_itfs | length > 0 and node_type == 'infra-master'

# at this step all variables (itfs names) are properly
# set and therefore VLANs will be properly assigned
- include_vars: ../vars/osa-briges-vlans_vars.yml
  when: is_host_to_be_modified

- include_vars: ../vars/opennext-briges-vlans_vars.yml
  when: is_host_to_be_modified and node_type == 'infra-master' and not infra_master_running_kvm and not ansible_master_running_kvm

- include_vars: ../vars/opennext-briges-vlans-with-kvm-on-infra-master_vars.yml
  when: is_host_to_be_modified and node_type == 'infra-master' and infra_master_running_kvm

- include_vars: ../vars/opennext-briges-vlans-with-kvm-on-ansible-master_vars.yml
  when: is_host_to_be_modified and node_type == 'infra-master' and ansible_master_running_kvm

- name: Setting VLANs and bridges facts for node (osa-nodes)
  set_fact:
    vlans_list: "{{ osa_vlans | default([]) }}"
  when: is_host_to_be_modified and node_type == 'osa-nodes'

- name: Setting VLANs and bridges facts for node (infra-master)
  set_fact:
    vlans_list: "{{ osa_vlans | default([]) + opennext_vlans | default([]) }}"
    bridges_list: "{{ opennext_bridges | default([]) }}"
  when: is_host_to_be_modified and node_type == 'infra-master'

- name: Configuring {{ primary_itf_name }} VLANs and bridges
  template:
    src: "{{ role_path }}/templates/bridge_vlans_itf_cfg-ubuntu.j2"
    dest: "/etc/network/interfaces.d/{{ primary_itf_name }}.cfg"
    owner: root
    group: root
    mode: 0644
  register: primary_vlan_changed
  when: is_host_to_be_modified and primary_net_itf | length > 0 and (not is_aio or (force_networking | default(false) | bool))
  vars:
    - itf_blob: "{{ primary_itf_blob }}"
    - prov_itf: "{{ primary_itf_prov_itf[0] }}"
    - orig_prov_itf: "{{ primary_itf_orig_prov_itf[0] }}"
    - ip_suffix: "{{ ansible_host.split('.')[-1] }}"

- name: Configuring {{ secondary_net_itfs[0] }} VLANs and bridges
  template:
    src: "{{ role_path }}/templates/bridge_vlans_itf_cfg-ubuntu.j2"
    dest: "/etc/network/interfaces.d/{{ secondary_net_itfs[0] }}.cfg"
    owner: root
    group: root
    mode: 0644
  register: secondary_vlan_changed
  when: is_host_to_be_modified and secondary_net_itfs | length > 0 and (not is_aio or (force_networking | default(false) | bool))
  vars:
    - prov_itf: "{{ secondary_net_itfs[0] }}"
    - itf_type: secondary
    - ip_suffix: "{{ ansible_host.split('.')[-1] }}"

- name: Set fact for conditional execution
  set_fact:
    network_reconfig: True
  when: is_host_to_be_modified and ((primary_changed is defined and primary_changed.changed) or
         (secondary_changed is defined and secondary_changed.changed) or
         (loopback_changed is defined and loopback_changed.changed) or
         (primary_vlan_changed is defined and primary_vlan_changed.changed) or
         (secondary_vlan_changed is defined and secondary_vlan_changed.changed) or
         (primary_bridge_changed is defined and primary_bridge_changed.changed) or
         (last_reboot_time < last_itfs_files_mod))

- name: Disabling existing services for DIB dhcp-all-interfaces
  shell: systemctl list-unit-files | grep dhcp-interface | sed -e 's/^.*dhcp/dhcp/' | sed -e 's/  *.*//' -e 's/^/systemctl disable -q --force /' | bash
  ignore_errors: true
  changed_when: false
  when: is_host_to_be_modified

- name: Disabling existing services for DIB dhcp-all-interfaces
  shell: systemctl list-units | grep dhcp-interface | sed -e 's/^.*dhcp/dhcp/' | sed -e 's/  *.*//' -e 's/^/systemctl disable -q --force /' | bash
  ignore_errors: true
  changed_when: false
  when: is_host_to_be_modified

- name: Stopping existing services for DIB dhcp-all-interfaces
  shell: systemctl list-units | grep dhcp-interface | sed -e 's/^.*dhcp/dhcp/' | sed -e 's/  *.*//' -e 's/^/systemctl stop -q --force /' | bash
  ignore_errors: true
  changed_when: false
  when: is_host_to_be_modified

- name: Removing DIB dhcp-all-interfaces udev item {{ item }}
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /usr/lib/systemd/system/dhcp-interface@.service
    - /etc/udev/rules.d/99-dhcp-all-interfaces.rules
    - /usr/local/sbin/dhcp-all-interfaces.sh
  register: removed_udev_rules
  when: is_host_to_be_modified

- name: Restarting udev service
  shell: "udevadm control --reload-rules && udevadm trigger"
  when: is_host_to_be_modified and removed_udev_rules is changed

- name: Rebooting nodes
  shell: echo "sleep 5 ; reboot" | at now + 0 min
  when: is_host_to_be_modified and network_reconfig is defined and network_reconfig

- name: Waiting for nodes to be reachable again by SSH
  wait_for: >
    host="{{ hostvars.get(inventory_hostname, {}).get('ansible_host', inventory_hostname) }}"
    port=22
    delay=60
    timeout=3600
    sleep=20
    connect_timeout=10
    search_regex=OpenSSH
  delegate_to: localhost
  become: no
  when: is_host_to_be_modified and network_reconfig is defined and network_reconfig
