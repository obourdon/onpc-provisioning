# Tasks for configuring network interfaces on CentOS
---
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- fail: msg="Missing, empty or bad node_type variable"
  when: is_host_to_be_modified and (node_type is undefined or node_type | length == 0 or node_type not in ['osa-nodes', 'infra-master'])

- name: Retrieving system network interfaces
  find:
    paths: "/sys/class/net"
    file_type: link
  register: system_net_itfs_symlinks
  when: is_host_to_be_modified

- name: Retrieving system network interfaces links informations
  stat:
    path: "{{ item }}"
  register: system_net_itfs_infos
  with_items: "{{ system_net_itfs_symlinks.get('files', []) | selectattr('path', 'defined') | map(attribute='path') | list }}"
  when: is_host_to_be_modified

# We keep track of non virtual aka physical interfaces
- name: Setting facts for system network interfaces
  set_fact:
    physical_system_net_itfs: "{% set sel = [] %}{% for k in system_net_itfs_infos.get('results', []) %}{% if not k.get('stat', {}).get('lnk_target', '') is match('.*/virtual/.*') %}{% set l = sel.append(k.get('item', '').split('/')[-1]) %}{% endif %}{% endfor %}{{ sel }}"
    all_system_net_itfs: "{% set sel = [] %}{% for k in system_net_itfs_infos.get('results', []) %}{% set l = sel.append(k.get('item', '').split('/')[-1]) %}{% endfor %}{{ sel }}"
  when: is_host_to_be_modified

- name: Setting facts for primary interface IP retrieval (primary-prefix)
  set_fact:
    match_ip_prefix: "{{ primary_itf_prefix }}"
  when: is_host_to_be_modified and primary_itf_prefix is defined and primary_itf_prefix | length > 0

- name: Setting facts for primary interface IP retrieval (ip-prefix)
  set_fact:
    match_ip_prefix: "{{ hostvars[inventory_hostname]['ip_prefix'] }}"
  when: is_host_to_be_modified and (primary_itf_prefix is undefined or primary_itf_prefix | length == 0)

- fail: msg="Missing or empty match_ip_prefix variable"
  when: is_host_to_be_modified and (match_ip_prefix is undefined or match_ip_prefix | length == 0)

- name: Setting facts for non-handled network interfaces
  set_fact:
    primary_net_itf: "{% set sel = [] %}{% for k in ansible_interfaces %}{% if hostvars.get(inventory_hostname, {}).get('ansible_' + k | replace('-', '_'), {}).get('ipv4', {}).get('address', '') is match(match_ip_prefix + '\\..*') %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
    secondary_net_itfs: "{% set sel = [] %}{% for k in physical_system_net_itfs %}{% if k != 'lo' and not hostvars.get(inventory_hostname, {}).get('ansible_' + k | replace('-', '_'), {}).get('ipv4', {}).get('address', '') is match(match_ip_prefix + '.*') %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
  when: is_host_to_be_modified

# at this step all variables (itfs names) are properly
# set and therefore VLANs will be properly assigned
- include_vars: ../vars/osa-bridges-vlans_vars.yml
  when: is_host_to_be_modified

- include_vars: ../vars/opennext-bridges-vlans_vars.yml
  when: is_host_to_be_modified and node_type == 'infra-master' and not infra_master_running_kvm and not ansible_master_running_kvm

- include_vars: ../vars/opennext-bridges-vlans-with-kvm-on-infra-master_vars.yml
  when: is_host_to_be_modified and node_type == 'infra-master' and infra_master_running_kvm

- include_vars: ../vars/opennext-bridges-vlans-with-kvm-on-ansible-master_vars.yml
  when: is_host_to_be_modified and node_type == 'infra-master' and ansible_master_running_kvm

- name: Setting VLANs and bridges facts for node (osa-nodes)
  set_fact:
    vlans_list: "{{ osa_vlans | default([]) }}"
  when: is_host_to_be_modified and node_type == 'osa-nodes'

- name: Copying network interface templates
  template:
    src: "{{ role_path }}/templates/centos/ifcfg-{{ item }}.j2"
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
    owner: root
    group: root
    mode: 0644
  register: itfs_changed
  vars:
    suffix: "{{ hostvars.get(inventory_hostname, {}).get('ansible_' + primary_net_itf[0] | replace('-', '_'), {}).get('ipv4', {}).get('address', '').split('.')[-1] }}"
  when: is_host_to_be_modified and node_type == 'osa-nodes'
  with_items:
    - eth0
    - eth0.10
    - eth1
    - eth1.20
    - eth1.30
    - br-host
    - br-mgmt
    - br-storage
    - br-vxlan
    - br-vlan

- name: Getting end result
  set_fact:
    network_reconfig: "{{ itfs_changed.get('results', {}) | selectattr('changed', 'defined') | map(attribute='changed') | map('bool') | list }}"
  when: is_host_to_be_modified and node_type == 'osa-nodes'

- name: Rebooting nodes
  shell: echo "sleep 5 ; reboot" | at now + 0 min
  when: is_host_to_be_modified and network_reconfig is defined and true in network_reconfig

- name: Waiting for nodes to be reachable again by SSH
  wait_for: >
    host="{{ hostvars.get(inventory_hostname, {}).get('ansible_host', inventory_hostname) }}"
    port=22
    delay=60
    timeout=3600
    sleep=20
    connect_timeout=10
    search_regex=OpenSSH
  delegate_to: localhost
  become: no
  when: is_host_to_be_modified and network_reconfig is defined and true in network_reconfig
