---
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: localhost
  connection: local

  tasks:

    - import_tasks: ../tasks/system_infos.yml

- hosts: infra-master
  become: yes

  vars_files:
    - ../vars/infra-master-configure-system_vars.yml
    - ../vars/infra-master-deploy-bifrost_vars.yml

  pre_tasks:

    - name: Setting default facts from inventory or variables
      set_fact:
        infra_master_running_kvm: "{{ infra_master_running_kvm | default(kvm_on_infra_master) | default(true) | bool }}"
        ansible_master_running_kvm: "{{ ansible_master_running_kvm | default(kvm_on_ansible_master) | default(false) | bool }}"
        baremetal_provisioning: "{{ baremetal_provisioning | default(real_baremetal) | default(false) | bool }}"

    - fail: msg="infra_master_running_kvm and ansible_master_running_kvm can not be both set to true"
      when: infra_master_running_kvm and ansible_master_running_kvm

    - import_tasks: ../tasks/system_infos.yml

    - name: Verifying repositories
      apt_repository:
        repo: ppa:ansible/ansible
        state: present
        filename: 'ansible'
      environment:
        https_proxy: ""

    - name: Setting facts for roles
      set_fact:
        is_aio: false
        is_host_to_be_modified: true
        ip_prefix: "{{ ip_prefix | default('20.20.20') }}"
        ip_suffix: "{{ ip_suffix | default(1) }}"
        ip_netmask_bits: "{{ ip_netmask_bits | default(24) }}"

    - name: Storing collision IP addresses list
      set_fact:
        collision_ips: "{{ hostvars['localhost']['local_ips'] | default([]) | intersect(local_ips) }}"

    - name: Computing provisioning master IP address
      set_fact:
        master_ip: '{{ ip_prefix }}.{{ ip_suffix }}'

    - name: Checking IP collisions
      fail: msg="Collision in IP addresses {{ collision_ips }}"
      when: ansible_master_running_kvm is defined and ansible_master_running_kvm and collision_ips | length > 0

    - name: Checking duplicate IPs
      fail: msg="ip_prefix and ip_suffix variables lead to {{ master_ip }} colliding with {{ hostvars['localhost']['local_ips'] }}"
      when: master_ip in hostvars['localhost']['local_ips']

    - name: Setting facts for host bridge
      set_fact:
        primary_bridge_name: br-host
      when: not baremetal_provisioning and infra_master_running_kvm

    - name: Setting facts for VMs bridge
      set_fact:
        secondary_bridge_name: br-vms
      when: not baremetal_provisioning and infra_master_running_kvm

    - name: Setting fact for baremetal provisioning DHCP timeout
      set_fact:
        dhcp_timeout: 90
      when: baremetal_provisioning and dhcp_timeout is not defined

  roles:
    - { role: configure-packages, node_type: infra-master }
    - { role: configure-packages, node_type: infra-master-kvm, when: infra_master_running_kvm }
    - configure-drivers
    - { role: configure-ntp, node_type: infra-master }
    - { role: configure-network-interfaces,
        node_type: infra-master,
        primary_itf_prefix: "{{ (internal_primary_itf_ip | default(inventory_hostname)).split('.')[:-1] | join('.') }}"
      }

  post_tasks:

    - name: Configuring infra-master node for KVM/libvirt
      include_tasks: ../tasks/kvm_host_configure.yml
      when: infra_master_running_kvm

    - name: Configuring System Wide Proxy
      lineinfile:
        path: /etc/environment
        backrefs: yes
        regexp: '^no_proxy="(.*)"$'
        line: 'no_proxy="\1,{{ ip_prefix }}.0/{{ ip_netmask_bits }}"'
        state: present
        owner: root
        group: root
        mode: 0644
      when: itf is defined

    - name: Cleaning Up Hosts File
      lineinfile:
        path: /etc/hosts
        regexp: "{{ item }}"
        state: absent
        owner: root
        group: root
        mode: 0644
      with_items:
        - '^127.0.1.1\s.*'
        - '^$'
        - '^#.*IPv6.*'
        - '.*::.*'
      notify: Creating Hosts File Template
      when: itf is defined

    - name: Copying Network Hosts Script
      copy:
        src: ../files/network-hosts.sh
        dest: /usr/local/bin/network-hosts.sh
        owner: root
        group: root
        mode: 0755

    - name: Copying Network Hosts Service Config File
      copy:
        src: ../files/network-hosts.service
        dest: /lib/systemd/system/network-hosts.service
        owner: root
        group: root
        mode: 0644
      notify: Restarting Network Hosts Service

    - meta: flush_handlers

    - include_tasks: ../tasks/system_user_home.yml

    - include_tasks: ../tasks/store_facts.yml facts_file="opennext_infra_master_configure_system"
      vars:
        keys_to_store:
          - "^kvm_on_.*"
          - ".*_master_running_kvm$"
          - ".*baremetal.*"
          - "^ip_.*fix$"
          - "^master_ip$"
          - "^prov_vlan_id$"
          - "^active_bridges.*"
          - "^primary_itf$"
          - "^secondary_itf$"
          - "^.*active_ether_itfs$"
          - "^vlans_list$"
          - "^ansible_all_ipv4_addresses$"
          - "^ansible_default_ipv4$"
          - "^ansible_dns$"
          - "^ansible_interfaces$"
          - "^.*libvirt_networks"
          - "^groups$"
          - "^inventory_hostname$"

  handlers:

    - name: Creating Hosts File Template
      copy:
        remote_src: yes
        src: /etc/hosts
        dest: /etc/hosts.tmpl
        owner: root
        group: root
        mode: 0644

    - name: Activating Network Hosts Service
      command: systemctl enable network-hosts.service
      listen: "Restarting Network Hosts Service"

    - name: Running Network Hosts Service
      command: /usr/local/bin/network-hosts.sh
      listen: "Restarting Network Hosts Service"
