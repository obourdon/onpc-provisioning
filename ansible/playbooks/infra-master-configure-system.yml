---
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: localhost
  connection: local

  tasks:

    - import_tasks: ../tasks/system_infos.yml

- hosts: infra-master
  become: yes

  vars_files:
    - ../vars/infra-master-configure-system_vars.yml
    - ../vars/infra-master-deploy-bifrost_vars.yml

  pre_tasks:

    - name: Checking non baremetal interface
      fail: msg='Non baremetal can not use primary network interface for Bifrost'
      when: not baremetal_provisioning and use_baremetal_primary_itf

    - name: Setting default facts from inventory or variables
      set_fact:
        infra_master_running_kvm: "{{ infra_master_running_kvm | default(kvm_on_infra_master) | default(true) | bool }}"
        ansible_master_running_kvm: "{{ ansible_master_running_kvm | default(kvm_on_ansible_master) | default(false) | bool }}"
        baremetal_provisioning: "{{ baremetal_provisioning | default(real_baremetal) | default(false) | bool }}"

    - name: Checking infra-master KVM settings
      fail: msg="infra_master_running_kvm and ansible_master_running_kvm can not be both set to true"
      when: infra_master_running_kvm and ansible_master_running_kvm

    - include_vars: ../vars/infra-master-kvm_vars.yml
      when: infra_master_running_kvm

    - import_tasks: ../tasks/system_infos.yml

    - name: Verifying repositories
      apt_repository:
        repo: ppa:ansible/ansible
        state: present
        filename: 'ansible'
      environment:
        https_proxy: ""

    - name: Setting facts for roles
      set_fact:
        is_aio: false
        is_host_to_be_modified: true
        ip_prefix: "{{ ip_prefix | default('20.20.20') }}"
        ip_suffix: "{{ ip_suffix | default(1) }}"
        primary_itf_ip: "{{ internal_primary_itf_ip | default(hostvars[inventory_hostname]['ansible_host']) }}"

    - name: Verifying coherence of network informations
      block:
        - set_fact:
            prov_itf_network_cidr1: '{{ ip_prefix }}.{{ ip_suffix }}/{{ ip_netmask_bits }}'
            prov_itf_network_cidr2: '{{ ip_prefix }}.{{ ip_suffix }}/{{ ip_netmask }}'
        - fail: msg='Incoherent network informations {{prov_itf_network_cidr1 }} vs {{ prov_itf_network_cidr2 }}'
          when: (prov_itf_network_cidr1 | ipaddr('network') != prov_itf_network_cidr2 | ipaddr('network') or
                 prov_itf_network_cidr1 | ipaddr('prefix') != prov_itf_network_cidr2 | ipaddr('prefix'))
      when: ip_netmask_bits is defined and ip_netmask is defined

    - name: Setting default IP netmask facts values
      set_fact:
        ip_netmask_bits: 24
      when: ip_netmask_bits is undefined and ip_netmask is undefined

    - name: Setting default IP netmask facts values (bits)
      set_fact:
        prov_itf_network_cidr: '{{ ip_prefix }}.{{ ip_suffix }}/{{ ip_netmask_bits }}'
      when: ip_netmask_bits is defined

    - name: Setting default IP netmask facts values (bits)
      set_fact:
        prov_itf_network_cidr: '{{ ip_prefix }}.{{ ip_suffix }}/{{ ip_netmask }}'
      when: ip_netmask is defined

    - name: Computing extra IP informations (primary + master)
      set_fact:
        prov_itf_ip: '{{ ip_prefix }}.{{ ip_suffix }}'
        prov_itf_network_cidr: "{{ prov_itf_network_cidr | ipaddr('network') }}/{{ prov_itf_network_cidr | ipaddr('prefix') }}"
        prov_itf_network_broadcast: "{{ prov_itf_network_cidr | ipaddr('broadcast') }}"
        primary_itf_prefix: "{{ primary_itf_ip.split('.')[:-1] | join('.') }}"
        primary_itf_name: "{% set sel = [] %}{% for k in ansible_interfaces %}{% if hostvars.get(inventory_hostname, {}).get('ansible_' + k | replace('-', '_'), {}).get('ipv4', {}).get('address', '') is match(primary_itf_ip) %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"

    - name: Storing additional IP informations (primary)
      set_fact:
        primary_itf_infos: "{{ hostvars.get(inventory_hostname, {}).get('ansible_' + primary_itf_name[0] | replace('-', '_'), {}) }}"

    - name: Storing additional IP informations (primary)
      set_fact:
        primary_itf_network_cidr: "{{ primary_itf_infos['ipv4']['network'] }}/{{ primary_itf_infos['ipv4']['netmask'] }}"

    - name: Computing extra IP informations (primary)
      set_fact:
        primary_itf_network_cidr: "{{ primary_itf_network_cidr | ipaddr('network') }}/{{ primary_itf_network_cidr | ipaddr('prefix') }}"
        primary_itf_network_broadcast: "{{ primary_itf_network_cidr | ipaddr('broadcast') }}"

    - name: Checking broadcast addresses
      fail: msg='Incoherent broadcast addresses'
      when: primary_itf_network_broadcast != primary_itf_infos['ipv4']['broadcast']

    - name: Storing collision IP addresses list
      set_fact:
        collision_ips: "{{ hostvars['localhost']['local_ips'] | default([]) | intersect(local_ips) }}"

    - name: Checking IP collisions
      fail: msg="Collision in IP addresses {{ collision_ips }}"
      when: ansible_master_running_kvm is defined and ansible_master_running_kvm and collision_ips | length > 0

    - name: Checking duplicate IPs
      fail: msg="ip_prefix and ip_suffix variables lead to {{ prov_itf_ip }} colliding with {{ hostvars['localhost']['local_ips'] }}"
      when: prov_itf_ip in hostvars['localhost']['local_ips']

    - name: Setting facts for host bridge
      set_fact:
        primary_bridge_name: "{{ host_bridge_itf }}"
      when: not baremetal_provisioning

    - name: Setting facts for VMs bridge
      set_fact:
        secondary_bridge_name: "{{ kvm_vms_bridge_itf }}"
      when: not baremetal_provisioning and infra_master_running_kvm

    - name: Setting fact for baremetal provisioning DHCP timeout
      set_fact:
        dhcp_timeout: 90
      when: baremetal_provisioning and dhcp_timeout is not defined

  roles:
    - { role: configure-packages, node_type: infra-master }
    - { role: configure-packages, node_type: infra-master-kvm, when: infra_master_running_kvm }
    - configure-drivers
    - { role: configure-ntp,
        node_type: infra-master,
        itf_network_broadcast: "{{ prov_itf_network_broadcast }}",
        itf_network_cidr: "{{ prov_itf_network_cidr }}"
      }
    - { role: configure-network-interfaces, node_type: infra-master }

  post_tasks:

    - name: Configuring infra-master node for KVM/libvirt
      include_tasks: ../tasks/kvm_host_configure.yml
      when: infra_master_running_kvm

    - name: Setting fact for local IPs (list)
      set_fact:
        no_proxy_local_ips: "[ \"{{ prov_itf_ip }}\", \"{{ primary_itf_ip }}\"{% if ansible_master_running_kvm is defined and ansible_master_running_kvm | bool %}, \"{{ hostvars['kvm-master']['ansible_host'] }}\"{% endif %} ]"

    - name: Setting fact for local IPs (string)
      set_fact:
        no_proxy_local_ips: "{{ no_proxy_local_ips | list | unique | join(',') }}"

    - name: Configuring System Wide Proxy
      lineinfile:
        path: /etc/environment
        backrefs: yes
        regexp: '^no_proxy="(.*)"$'
        line: 'no_proxy="\1,{{ no_proxy_local_ips }}"'
        state: present
        owner: root
        group: root
        mode: 0644

    - name: Cleaning Up Hosts File
      lineinfile:
        path: /etc/hosts
        regexp: "{{ item }}"
        state: absent
        owner: root
        group: root
        mode: 0644
      with_items:
        - '^127.0.1.1\s.*'
        - '^$'
        - '^#.*IPv6.*'
        - '.*::.*'
      notify: Creating Hosts File Template
      when: itf is defined

    - name: Copying Network Hosts Script
      copy:
        src: ../files/network-hosts.sh
        dest: /usr/local/bin/network-hosts.sh
        owner: root
        group: root
        mode: 0755

    - name: Copying Network Hosts Service Config File
      copy:
        src: ../files/network-hosts.service
        dest: /lib/systemd/system/network-hosts.service
        owner: root
        group: root
        mode: 0644
      notify: Restarting Network Hosts Service

    - meta: flush_handlers

    - include_tasks: ../tasks/system_user_home.yml

    - include_tasks: ../tasks/store_facts.yml facts_file="opennext_infra_master_configure_system"
      vars:
        keys_to_ignore:
          - "^system_net_itfs_.*"
          - "^primary_itf_file_content$"
          - "^primary_itf_blob$"
        keys_to_store:
          - "^kvm_on_.*"
          - ".*_master_running_kvm$"
          - ".*baremetal.*"
          - '^use_chrony$'
          - "^ip_.*fix$"
          - "^ip_netmask.*$"
          - "^prov_itf_ip$"
          - "^prov_itf_network.*$"
          - "^prov_vlan_id$"
          - "^primary_bridge_name.*"
          - "^primary_itf.*"
          - "^.*_net_itf.*"
          - "^vlans_list$"
          - "^ansible_all_ipv4_addresses$"
          - "^ansible_date_time$"
          - "^ansible_default_ipv4$"
          - "^ansible_dns$"
          - "^ansible_domain$"
          - "^ansible_fqdn$"
          - "^ansible_host.*$"
          - "^ansible_interfaces$"
          - "^.*libvirt_networks"
          - "^groups$"
          - "^inventory_hostname$"
          - ".*local_ips$"

  handlers:

    - name: Creating Hosts File Template
      copy:
        remote_src: yes
        src: /etc/hosts
        dest: /etc/hosts.tmpl
        owner: root
        group: root
        mode: 0644

    - name: Activating Network Hosts Service
      command: systemctl enable network-hosts.service
      listen: "Restarting Network Hosts Service"

    - name: Running Network Hosts Service
      command: /usr/local/bin/network-hosts.sh
      listen: "Restarting Network Hosts Service"
