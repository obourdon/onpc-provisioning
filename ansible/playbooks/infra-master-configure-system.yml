---
- hosts: localhost
  connection: local

  tasks:

    - import_tasks: ../tasks/system_infos.yml

- hosts: infra-master
  become: yes

  vars_files:
    - ../vars/infra-master-configure-system_vars.yml
    - ../vars/infra-master-deploy-bifrost_vars.yml
    - ../vars/infra-master-pkgs-ubuntu.yml
    - ../vars/infra-master-kvm-pkgs-ubuntu.yml
    - ../vars/osa-briges-vlans_vars.yml
    - ../vars/opennext-briges-vlans_vars.yml

  tasks:

    - import_tasks: ../tasks/system_infos.yml

    - name: Verifying repositories
      apt_repository:
        repo: ppa:ansible/ansible
        state: present
        filename: 'ansible'
      environment:
        https_proxy: ""

    - name: Verifying all mandatory packages
      package:
        name: "{{ systempkgs | sort }}"
        state: latest

    - name: Verifying all mandatory packages for running KVM/libvirt
      package:
        name: "{{ kvmsystempkgs | sort }}"
        state: latest
      when: master_running_kvm

    - include_tasks: ../tasks/kernel_drivers_modules.yml module={{ item }}
      with_items:
        - "bonding"
        - "bridge"
        - "br_netfilter"
        - "8021q"

    - name: Configuring IP forwarding via sysctl
      sysctl:
        name: "net.ipv4.ip_forward"
        value: 1
        sysctl_set: yes
        state: present
        reload: yes

    - name: Configuring Bridges for proper VLAN support via sysctl
      sysctl:
        name: "{{ item }}"
        value: 0
        sysctl_set: yes
        state: present
        reload: yes
      with_items:
        - net.bridge.bridge-nf-call-ip6tables
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-arptables
        - net.bridge.bridge-nf-filter-pppoe-tagged
        - net.bridge.bridge-nf-filter-vlan-tagged
      when: master_running_kvm

    - name: Storing collision IP addresses list
      set_fact:
        collision_ips: "{{ hostvars['localhost']['local_ips'] | default([]) | intersect(local_ips) }}"

    - name: Computing provisioning master IP address
      set_fact:
        master_ip: '{{ ip_prefix | default("20.20.20") }}.{{ ip_suffix | default(1) }}'

    - name: Checking IP collisions
      fail: msg="Collision in IP addresses {{ collision_ips }}"
      when: collision_ips | length > 0

    - name: Checking duplicate IPs
      fail: msg="ip_prefix and ip_suffix variables lead to {{ master_ip }} colliding with {{ hostvars['localhost']['local_ips'] }}"
      when: master_ip in hostvars['localhost']['local_ips']

    - import_tasks: ../tasks/select_network_interfaces_type.yml
      vars:
       itf_type: "ether"

    - import_tasks: ../tasks/filter_network_interfaces_name.yml
      vars:
        itf_reject_name: "virbr.*|.*\\.[1-9][0-9]*"

    - import_tasks: ../tasks/select_network_interfaces_state.yml
      vars:
       itf_state: false

    - name: Setting inactive ethernet network interfaces list
      set_fact:
        inactive_ether_itfs: "{{ itfs | list }}"

    - import_tasks: ../tasks/select_network_interfaces_type.yml
      vars:
       itf_type: "ether"

    - import_tasks: ../tasks/filter_network_interfaces_name.yml
      vars:
        itf_reject_name: "virbr.*|.*\\.[1-9][0-9]*"

    - import_tasks: ../tasks/select_network_interfaces_state.yml
      vars:
       itf_state: true

    - name: Setting active ethernet network interfaces list
      set_fact:
        active_ether_itfs: "{{ itfs | list }}"

    - import_tasks: ../tasks/select_network_interfaces_type.yml
      vars:
       itf_type: "bridge"

    - import_tasks: ../tasks/select_network_interfaces_state.yml
      vars:
       itf_state: true

    - name: Setting active bridge network interfaces list
      set_fact:
        active_bridges: "{{ itfs | list }}"
        active_bridges_itfs: "{{ itfs | map(attribute='interfaces') | flatten | list }}"

    - name: Checking if primary interface needs to migrate to bridge
      set_fact:
        primary: "{{ active_ether_itfs | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'defined') | selectattr('ipv4.address', 'match', ansible_default_ipv4.address) | list }}"

    - name: Setting fact for primary ethernet interface for migration to bridge
      set_fact:
        primary_itf: "{{ primary[0] }}"
      when: primary is defined and primary|length > 0

    - name: Checking if secondary interface needs to migrate to bridge
      set_fact:
        secondary: "{{ inactive_ether_itfs | selectattr('ipv4', 'undefined') | rejectattr('device', 'in', active_bridges_itfs) | list }}"

    - name: Setting fact for secondary ethernet interface for migration to bridge
      set_fact:
        secondary_itf: "{{ secondary[0] }}"
      when: (secondary is defined and secondary|length > 0)

    - name: Getting interfaces infos
      interfaces_file:
      register: cur_interfaces

    - name: Moving loopback interface to its own config file
      interfaces_file:
        src: /etc/network/interfaces
        dest: /etc/network/interfaces.d/lo.cfg
        iface: lo
        state: move
      register: lo_changed
      when: "'lo' in cur_interfaces.get('ifaces', {})"

    - name: Moving {{ primary_itf.get('device') }} primary ethernet interface to its own config file
      interfaces_file:
        src: /etc/network/interfaces
        dest: "/etc/network/interfaces.d/{{ primary_itf.get('device') }}.cfg"
        iface: "{{ primary_itf.get('device') }}"
        state: move
      register: primary_changed
      when: "primary_itf is defined and primary_itf.get('device') in cur_interfaces.get('ifaces', {})"

    - name: Migrating {{ primary_itf.get('device') }} primary ethernet interface to bridge
      interfaces_file:
        dest: "/etc/network/interfaces.d/{{ primary_itf.get('device') }}.cfg"
        iface: "{{ primary_itf.get('device') }}"
        state: bridge
        bridge_options:
          - { name: "br-host" }
          - { bridge_maxwait: 5 }
          - { bridge_stp: "off" }
          - { bridge_fd: 0 }
          - { bridge_waitport: 0 }
      register: bridge_changed
      when: primary_changed is defined and primary_changed.changed

    - name: Bringing down interface and dhcpclient for proper bridging
      set_fact:
        itf_down: "pkill dhclient ; ip addr flush {{ primary_itf.get('device') }} ; "
      when: primary_itf is defined and primary_itf.get('device')

    - name: Configuring {{ secondary_itf.device }}
      template:
        src: ../templates/bridge_vlans_itf_cfg.j2
        dest: "/etc/network/interfaces.d/{{ secondary_itf.device }}.cfg"
        owner: root
        group: root
        mode: 0644
      register: secondary_changed
      when: secondary_itf is defined
      vars:
        - prov_itf: "{{ secondary_itf.device }}"
        - prov_bridge: "{{ kvm_bridge_itf }}"
        - vlans_list: "{{ osa_vlans | default([]) + opennext_vlans | default([]) }}"

    - name: Set fact for conditional execution
      set_fact:
        network_reconfig: True
      when: ((lo_changed is defined and lo_changed.changed) or
             (primary_changed is defined and primary_changed.changed) or
             (secondary_changed is defined and secondary_changed.changed) or
             (bridge_changed is defined and bridge_changed.changed))

    - name: Restarting network services
      shell: echo "{{ itf_down | default('') }}service networking restart" | at now + 0 min
      when: network_reconfig is defined and network_reconfig

    - name: Wait for server come back
      wait_for: >
        host="{{ inventory_hostname }}"
        port=22
        delay=10
        timeout=60
      delegate_to: localhost
      become: no
      when: network_reconfig is defined and network_reconfig

    - name: Adding existing user {{ systemuser }} to group {{ libvirtgroup }}
      user:
        name="{{ systemuser }}"
        groups="{{ libvirtgroup }}"
        append=yes
      when: master_running_kvm

    - name: Making sure libvirt service is running
      service:
        name: "{{ libvirtservice }}"
        state: started
      when: master_running_kvm

    # Facts will be available as 'ansible_libvirt_networks'
    - name: Gather facts about available networks in KVM/libvirt
      virt_net:
        command: facts
      when: master_running_kvm

    - name: Creating KVM/libvirt network bridge template & network
      block:

        - name: Creating KVM/libvirt network bridge template & network
          become: no
          template:
            src: ../templates/kvm-network-bridge.xml.j2
            dest: "{{ systemuserhome }}/kvm-provisioning-network-bridge.xml"
            owner: "{{ systemuser }}"
            group: "{{ systemuser }}"
            mode: 0644
          vars:
            network_name: "{{ kvm_network_name }}"
            bridge_interface: "{{ kvm_bridge_itf }}"
            uuid_seed: "OpenNext"

        - name: Getting XML definition of KVM/libvirt network
          slurp:
            src: "{{ systemuserhome }}/kvm-provisioning-network-bridge.xml"
          register: xml_network

        - name: Creating KVM/libvirt network
          virt_net:
            command: define
            name: "{{ kvm_network_name }}"
            xml: "{{ xml_network['content'] | b64decode }}"
      when: master_running_kvm and kvm_network_name not in ansible_libvirt_networks

    - name: Autostarting KVM/libvirt network
      virt_net:
        autostart: yes
        name: "{{ kvm_network_name }}"
      when: master_running_kvm

    - name: Activating KVM/libvirt network
      virt_net:
        state: active
        name: "{{ kvm_network_name }}"
      when: master_running_kvm

    - name: Retrieving max free space mount point
      set_fact:
        max_free_mount: "{{ ansible_mounts | sort('size_available' | int) | last }}"
      when: master_running_kvm

    - name: Setting {{ libvirtvarpath }} destination to max free space zone
      set_fact:
        virt_dest: "{{ max_free_mount['mount'] }}"
      when: master_running_kvm

    - name: Getting filesystem informations about {{ libvirtvarpath }}
      stat:
        path: "{{ item }}"
        follow: yes
      register: libvirt_stat
      when: master_running_kvm
      with_items:
        - "{{ libvirtvarpath }}"
        - "{{ virt_dest }}"

    - name: Migrating {{ libvirtvarpath }} to {{ virt_dest }}
      block:

      - name: Stopping libvirt service
        service:
          name: "{{ libvirtservice }}"
          state: stopped

      - name: Moving over {{ libvirtvarpath }} to {{ virt_dest }}
        command: "mv {{ libvirtvarpath }} {{ virt_dest }}"

      - name: Re-creating {{ libvirtvarpath }} directory
        file:
          path: "{{ libvirtvarpath }}"
          state: directory
          owner: root
          group: root
          mode: 0755

      - name: Bindmounting {{ virt_dest | regex_replace('/$', '') }}/{{ libvirtvarpath | basename }} onto {{ libvirtvarpath }}
        mount:
          path: "{{ libvirtvarpath }}"
          src: "{{ virt_dest | regex_replace('/$', '') }}/{{ libvirtvarpath | basename }}"
          opts: bind
          fstype: none
          state: mounted

      - name: Restarting libvirt service
        service:
          name: "{{ libvirtservice }}"
          state: started
      when: master_running_kvm and libvirt_stat['results'][0]['stat']['dev'] != libvirt_stat['results'][1]['stat']['dev']

    - name: Configuring System Wide Proxy
      lineinfile:
        path: /etc/environment
        backrefs: yes
        regexp: '^no_proxy="(.*)"$'
        line: 'no_proxy="\1,{{ ip_prefix | default("20.20.20") }}.0/{{ ip_netmask_bits | default(24) }}"'
        state: present
        owner: root
        group: root
        mode: 0644
      when: itf is defined

    - name: Configuring NTP
      lineinfile:
        path: /etc/ntp.conf
        insertafter: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        owner: root
        group: root
        mode: 0644
      with_items:
        - { regexp: '^#broadcast ', line: 'broadcast {{ ip_prefix | default("20.20.20") }}.{{ ip_netmask_broadcast | default(255) }}' }
      when: itf is defined

    - name: Restarting NTP Service
      service: name=ntp enabled=yes state=restarted
      when: itf is defined

    - name: Cleaning Up Hosts File
      lineinfile:
        path: /etc/hosts
        regexp: "{{ item }}"
        state: absent
        owner: root
        group: root
        mode: 0644
      with_items:
        - '^127.0.1.1\s.*'
        - '^$'
        - '^#.*IPv6.*'
        - '.*::.*'
      notify: Creating Hosts File Template
      when: itf is defined

    - name: Copying Network Hosts Script
      copy:
        src: ../files/network-hosts.sh
        dest: /usr/local/bin/network-hosts.sh
        owner: root
        group: root
        mode: 0755

    - name: Copying Network Hosts Service Config File
      copy:
        src: ../files/network-hosts.service
        dest: /lib/systemd/system/network-hosts.service
        owner: root
        group: root
        mode: 0644
      notify: Restarting Network Hosts Service

    - meta: flush_handlers

    - include_tasks: ../tasks/system_user_home.yml

  handlers:

    - name: Creating Hosts File Template
      copy:
        remote_src: yes
        src: /etc/hosts
        dest: /etc/hosts.tmpl
        owner: root
        group: root
        mode: 0644

    - name: Activating Network Hosts Service
      command: systemctl enable network-hosts.service
      listen: "Restarting Network Hosts Service"

    - name: Running Network Hosts Service
      command: /usr/local/bin/network-hosts.sh
      listen: "Restarting Network Hosts Service"
