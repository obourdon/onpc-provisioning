---
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: infra-master
  become: no

  vars_files:
    - ../vars/infra-master-configure-system_vars.yml
    - ../vars/infra-master-deploy-bifrost_vars.yml

  tasks:

    - name: Retrieving Bifrost GitHub Repository
      git:
        repo: https://github.com/obourdon/bifrost
        dest: "{{ git }}"
        update: no

    - name: Creating Bifrost Virtualenv Directory
      file:
        path: "{{ venv }}"
        owner: "{{ systemuser }}"
        group: "{{ systemuser }}"
        mode: 0755
        state: directory

    - name: Setting Up Bifrost Environment
      command: "./scripts/env-setup.sh"
      args:
        chdir: "{{ git }}"
        creates: "{{ venv }}/bin/activate"
      environment:
        LC_ALL: C
        VENV: "{{ venv }}"
        https_proxy: ""
      register: setup_result

    - name: Retrieving Bifrost deployment informations
      slurp:
        src: "{{ git }}/env-vars"
      register:
        bifrost_env_info

    - name: Retrieving ansible-master environment informations
      set_fact:
        ansible_env: "{{ lookup('env', 'ANSIBLE_CALLBACK_WHITELIST') }}"
        env_already_set: "{{ bifrost_env_info['content'] | b64decode | regex_findall('export ANSIBLE_CALLBACK_WHITELIST=.*') }}"

    - name: Adding environment variable to remote environment script
      lineinfile:
        path: "{{ git }}/env-vars"
        line: "export ANSIBLE_CALLBACK_WHITELIST=\"{{ ansible_env }}\""
        state: present
        owner: "{{ systemuser }}"
        group: "{{ systemuser }}"
        mode: 0646
      when: ansible_env | length > 0 and env_already_set | length == 0

    - name: Getting Public IP
      ipify_facts:
      register: ipify_results
      environment:
        LC_ALL: C
        https_proxy: ""

    - name: Getting Setup Result
      set_fact:
        todo: "{{ setup_result.stdout.split('\n')[-3:-1] | join(' && ') | replace('source','.') | replace('env-vars','../env-vars') }}"
        dib_std_options: " -e deploy_image_filename={{ deployimagefilename }} -e dib_init_element=dhcp-all-interfaces -e dib_image_type=bootloader -e extra_dib_elements='devuser openssh-server' -e dib_packages=python,python3-yaml,dnsutils,net-tools,netcat,iputils-ping,traceroute,curl,lvm2,xfsprogs,initramfs-tools"

    - name: Setting partitioning informations
      set_fact:
        dib_partitioning_infos: " -e partitioning_file={{ systemuserhome }}/{{ partitioning_scheme }}.yml"
      when: partitioning_scheme is defined and partitioning_scheme | length > 0

    - name: Setting custom IPA ramdisk URL (if configured to do so)
      set_fact:
        opennext_ipa: " -e ipa_ramdisk_upstream_url={{ ipa_ramdisk_upstream_url }}"
      when: ipa_ramdisk_upstream_url is defined and ipa_ramdisk_upstream_url | length > 0

    - name: Requesting latest iPXE download (if configured to do so)
      set_fact:
        opennext_ipxe: " -e download_ipxe={{ download_latest_ipxe }}"
      when: download_latest_ipxe is defined and download_latest_ipxe | bool == True

    - name: Computing OS Image Options
      set_fact:
        os_opts: "{{ dib_std_options | default('') }}{{ dib_partitioning_infos | default('') }} -e dib_imagesize={{ root_part_size_gb | default(60) }} -e dib_os_release={{ os_release | default('xenial') }} -e dib_os_element={{ os_flavor | default('ubuntu-minimal') }} -e ipa_upstream_release={{ upstream_release | default('stable-pike') }}"
        opennext_opts: " -e ironic_tftp_master_path=/httpboot/master_images{{ opennext_ipa | default('') }}{{ opennext_ipxe | default('') }}"

    - name: Computing Keystone Options
      set_fact:
        keystone_opts: " -e enable_keystone=true -e noauth_mode=false"
      when: keystone

    - name: Making sure libvirt service is running
      become: yes
      service:
        name: "{{ libvirtservice }}"
        state: started
      when: infra_master_running_kvm

    # Facts will be available as 'ansible_libvirt_networks'
    - name: Gathering facts about available networks in KVM/libvirt
      become: yes
      virt_net:
        command: facts
      when: infra_master_running_kvm

    - name: Retrieving provisioning interface from KVM/libvirt network infos
      set_fact:
        itf: "{{ ansible_libvirt_networks.get('provisioning', {}).get('bridge') }}"
      when: infra_master_running_kvm

    - name: Retrieving provisioning interface from network infos
      set_fact:
        itf: "{{ kvm_prov_bridge_itf }}"
      when: not infra_master_running_kvm and not baremetal_provisioning

    - import_tasks: ../tasks/baremetal_bifrost_config.yml
      when: baremetal_provisioning

    - name: Retrieving all deploy options
      set_fact:
        all_args: "-e network_interface={{ itf }}{{ keystone_opts }}{{ os_opts }}{{ opennext_opts }}"
        args_file: "{{ bifrost_env_vars_file }}"

    - name: Populating remote configuration file
      template:
        src: ../templates/bifrost_extra_deployment_args.j2
        dest: "{{ args_file }}"
        owner: "{{ systemuser }}"
        group: "{{ systemuser }}"
        mode: 0644
      vars:
        args: "{{ (all_args | replace(' -e ', '\n') | replace('-e ', '')).split('\n') | list }}"

    - name: Setting fact for command line to execute on remote
      set_fact:
        remote_cmd_line: "ssh {{ systemuser }}@({{ ansible_default_ipv4.address }} | {{ ipify_results.get('ansible_facts', {}).get('ipify_public_ip', '') }}) -t 'cd {{ git }}/playbooks && {{ todo }} && https_proxy= ansible-playbook -i inventory/target install.yaml -e @{{ args_file }}'"

    - name: Printing complete deploy command
      debug: msg="ssh {{ systemuser }}@({{ ansible_default_ipv4.address }} | {{ ipify_results.get('ansible_facts', {}).get('ipify_public_ip', '') }}) -t 'cd {{ git }}/playbooks && {{ todo }} && https_proxy= ansible-playbook -i inventory/target install.yaml {{ all_args }}'"

    - name: Printing alternate (shorter) deploy command
      debug: msg="{{ remote_cmd_line }}"

    - include_tasks: ../tasks/store_facts.yml facts_file="opennext_infra_master_deploy_bifrost"
      vars:
        keys_to_store:
          - "^all_args$"
          - "^args_file$"
          - "^remote_cmd_line$"

    - name: Running Bifrost Playbook
      shell: ". ../env-vars && . {{ venv }}/bin/activate && ansible-playbook -i inventory/target install.yaml {{ all_args }}"
      args:
        chdir: "{{ git }}/playbooks"
      environment:
        LC_ALL: C
        VENV: "{{ venv }}"
        https_proxy: ""
      when: todo is undefined
