---
- hosts: infra-master
  become: no

  vars_files:
    - ../vars/infra-master-configure-system_vars.yml
    - ../vars/infra-master-deploy-bifrost_vars.yml

  tasks:

    - name: Retrieving Bifrost GitHub Repository
      git:
        repo: https://github.com/obourdon/bifrost
        dest: "{{ git }}"

    - name: Creating Bifrost Virtualenv Directory
      file:
        path: "{{ venv }}"
        owner: "{{ systemuser }}"
        group: "{{ systemuser }}"
        mode: 0755
        state: directory

    - name: Setting Up Bifrost Environment
      command: "./scripts/env-setup.sh"
      args:
        chdir: "{{ git }}"
        creates: "{{ venv }}/bin/activate"
      environment:
        LC_ALL: C
        VENV: "{{ venv }}"
        https_proxy: ""
      register: setup_result

    - name: Getting Public IP
      ipify_facts:
      register: ipify_results
      environment:
        LC_ALL: C
        https_proxy: ""

    - name: Getting Setup Result
      set_fact:
        todo: "{{ setup_result.stdout.split('\n')[-3:-1] | join(' && ') | replace('source','.') | replace('env-vars','../env-vars') }}"
        dib_std_options: " -e deploy_image_filename={{ deployimagefilename }} -e dib_init_element=dhcp-all-interfaces -e dib_image_type=bootloader -e extra_dib_elements=dracut-regenerate,devuser,cloud-init-nocloud,openssh-server -e dib_packages=python,python3-yaml,dracut,dnsutils,net-tools,netcat,iputils-ping,traceroute,curl"

    - name: Setting partitioning informations
      set_fact:
        dib_partitioning_infos: " -e partitioning_file={{ systemuserhome }}/{{ partitioning_scheme }}.yml"
      when: partitioning_scheme is defined and partitioning_scheme | length > 0

    - name: Computing OS Image Options
      set_fact:
        os_opts: "{{ dib_std_options | default('') }}{{ dib_partitioning_infos | default('') }} -e dib_imagesize={{ root_part_size_gb | default(60) }} -e dib_os_release={{ os_release | default('xenial') }} -e dib_os_element={{ os_flavor | default('ubuntu-minimal') }} -e ipa_upstream_release={{ upstream_release | default('stable-pike') }}"
        opennext_opts: " -e use_symlinks=true"

    - name: Computing Keystone Options
      set_fact:
        keystone_opts: " -e enable_keystone=true -e noauth_mode=false"
      when: keystone

    - name: Making sure libvirt service is running
      become: yes
      service:
        name: "{{ libvirtservice }}"
        state: started
      when: master_running_kvm

    # Facts will be available as 'ansible_libvirt_networks'
    - name: Gathering facts about available networks in KVM/libvirt
      become: yes
      virt_net:
        command: facts
      when: master_running_kvm

    - name: Retrieving provisioning interface from KVM/libvirt network infos
      set_fact:
        itf: "{{ ansible_libvirt_networks.get('provisioning', {}).get('bridge') }}"
      when: master_running_kvm

    - name: Retrieving provisioning interface from network infos
      set_fact:
        itf: "{{ kvm_bridge_itf }}"
      when: not master_running_kvm

    - name: Retrieving all deploy options
      set_fact:
        all_args: "-e network_interface={{ itf }}{{ keystone_opts }}{{ os_opts }}{{ opennext_opts }}"
        args_file: "{{ systemuserhome }}/deploy_args.yml"

    - name: Populating remote configuration file
      template:
        src: ../templates/extra_deployment_args.j2
        dest: "{{ args_file }}"
        owner: "{{ systemuser }}"
        group: "{{ systemuser }}"
        mode: 0644
      vars:
        args: "{{ all_args.split(' ') | reject('equalto', '-e') | list }}"

    - name: Printing complete deploy command
      debug: msg="ssh {{ systemuser }}@({{ ansible_default_ipv4.address }} | {{ ipify_results.get('ansible_facts', {}).get('ipify_public_ip', '') }}) -t 'cd {{ git }}/playbooks && {{ todo }} && https_proxy= ansible-playbook -i inventory/target install.yaml {{ all_args }}'"

    - name: Printing alternate (shorter) deploy command
      debug: msg="ssh {{ systemuser }}@({{ ansible_default_ipv4.address }} | {{ ipify_results.get('ansible_facts', {}).get('ipify_public_ip', '') }}) -t 'cd {{ git }}/playbooks && {{ todo }} && https_proxy= ansible-playbook -i inventory/target install.yaml -e @{{ args_file }}'"

    - name: Running Bifrost Playbook
      shell: ". ../env-vars && . {{ venv }}/bin/activate && ansible-playbook -i inventory/target install.yaml {{ all_args }}"
      args:
        chdir: "{{ git }}/playbooks"
      environment:
        LC_ALL: C
        VENV: "{{ venv }}"
        https_proxy: ""
      when: todo is undefined
