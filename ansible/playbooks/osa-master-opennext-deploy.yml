---
# Copyright (c) 2018, OpenNext SAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: infra-master

  pre_tasks:

    - name: Verifying Ansible meets version requirements
      assert:
        that: "ansible_version.full is version_compare('2.5', '>=')"
        msg: >
          "You must update Ansible to at least 2.5 (current is {{ ansible_version.full }})"

  tasks:

    - name: Retrieving facts
      setup:

- hosts: osa-master
  become: yes

  vars_files:
    - ../vars/osa-bridges-vlans_vars.yml

  tasks:

    - name: Setting Facts
      set_fact:
        osa_deploy_conf_path: "/etc/openstack_deploy"
        ip_prefixes: "{{ hostvars.get('infra-master', {}).get('ansible_local', {}).get('opennext_infra_master_configure_system', {}).values() | selectattr('ip_prefix', 'defined') | map(attribute='ip_prefix') | list | unique }}"
        root_ssh_dir: "{{ root_dot_ssh_dir | default('/root/.ssh') }}"
        dest_repo_dir: "{{ dest_github_repo_dir | default('/opt') }}"
        is_aio: "{{ hostvars.get('infra-master', {}).get('groups', {}).get('osa-nodes', []) | length == 1 | bool }}"
        # Could also be osa-master instead of infra-master

    - fail: msg="Missing ip_prefix information"
      when: ip_prefixes | length != 1

    - name: Setting extra facts
      set_fact:
        osa_user_conf_file: "{{ osa_deploy_conf_path }}/user_variables.yml"
        onpc_user_conf_file: "{{ osa_deploy_conf_path }}/user_onpc_variables.yml"
        onpc_model_repo_dir: "{{ dest_repo_dir }}/onpc-basic-model"
        ip_prefix: "{{ ip_prefixes[0] }}"

    - fail: msg="isolated_network option can only be used in AIO mode"
      when: not is_aio and isolated_network is defined and isolated_network | bool

    - name: Setting proxy environment facts
      set_fact:
        proxy_env: {
          'http_proxy': "http://{{ proxy_host }}:{{ proxy_port | default(3128) }}",
          'https_proxy': "http://{{ proxy_host }}:{{ proxy_port | default(3128) }}",
          'ftp_proxy': "http://{{ proxy_host }}:{{ proxy_port | default(3128) }}",
          'no_proxy': 'localhost,127.0.0.1',
        }
      when: proxy_host is defined

    - name: Setting ansible environment fact (conditional)
      set_fact:
        ansible_release_env: { 'ANSIBLE_PACKAGE': 'git+https://github.com/opennext-io/ansible@6783b173bd8d7fcfb3abe7007a482a9b322b01c7' }
      when: openstack_release | default('queens') == 'pike'

    - name: Setting ansible environment fact
      set_fact:
        ansible_environment: "{{ proxy_env | default({}) | combine({ 'TMPDIR': '/var/tmp' }) | combine(ansible_release_env | default({})) }}"

    - name: Retrieving OSA GitHub Repository
      git:
        repo: "https://github.com/openstack/openstack-ansible"
        dest: "{{ dest_repo_dir }}/openstack-ansible"
        accept_hostkey: yes
        force: yes
        recursive: no
        version: "stable/{{ openstack_release | default('queens') }}"
      environment: "{{ proxy_env | default('{}') }}"

    - include_tasks: ../tasks/clone_private_git_repo.yml
      vars:
        repo: "{{ item.repo }}"
        repodst: "{{ item.get('repodst', '') }}"
        sshdir: "{{ root_ssh_dir }}"
        destdir: "{{ dest_repo_dir }}"
        gitenv:
          TMPDIR: "/var/tmp"
      with_items:
        - { repo: "onpc-basic-model" }

    - name: Retrieving OpenNext GitHub Repositories
      git:
        repo: "https://github.com/opennext-io/{{ item }}"
        dest: "{{ dest_repo_dir }}/{{ item }}"
        force: yes
        recursive: no
      with_items:
        - "onpc-logging"
        - "onpc-monitoring"
      environment: "{{ proxy_env | default('{}') }}"

    - name: Boostrapping Ansible for OSA
      command: "./scripts/bootstrap-ansible.sh"
      args:
        chdir: "/opt/openstack-ansible"
        creates: "/opt/ansible-runtime/bin/ansible-playbook"
      environment: "{{ ansible_environment }}"
      register: bootstrap_ansible_result

    - name: Boostrapping AIO for OSA
      command: "./scripts/bootstrap-aio.sh"
      args:
        chdir: "/opt/openstack-ansible"
        creates: "{{ osa_user_conf_file }}"
        # Could also be /etc/network/interfaces.d/osa_interfaces.cfg (for Ubuntu)
      environment: "{{ proxy_env | default({}) | combine({ 'TMPDIR': '/var/tmp', 'BOOTSTRAP_OPTS': 'bootstrap_host_data_disk_device=vdb' }) }}"
      register: bootstrap_aio_result
      when: is_aio and not ((force_networking | default(false) | bool) and (force_partitioning | default(false) | bool))

    - name: Creating mandatory directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ osa_deploy_conf_path }}"
        - "{{ osa_deploy_conf_path }}/conf.d"
        - "{{ osa_deploy_conf_path }}/env.d"
      when: not is_aio or ((force_networking | default(false) | bool) and (force_partitioning | default(false) | bool))

    - name: Cleaning up AIO bootstraped files
      shell: "rm -f /etc/openstack_deploy/conf.d/* /etc/openstack_deploy/env.d/*"
      when: is_aio and bootstrap_aio_result is changed

    - name: Checking existence of user_secrets.yml
      stat:
        path: "{{ osa_deploy_conf_path }}/user_secrets.yml"
      register: user_secrets_info

    - name: Copying template of user_secrets.yml
      copy:
        src: "/opt/openstack-ansible/etc/openstack_deploy/user_secrets.yml"
        dest: "{{ osa_deploy_conf_path }}/user_secrets.yml"
        remote_src: yes
      when: not user_secrets_info.stat.exists

    - name: Generating any missing values in user_secrets
      command: "/opt/ansible-runtime/bin/python /opt/openstack-ansible/scripts/pw-token-gen.py --file {{ osa_deploy_conf_path }}/user_secrets.yml"
      changed_when: false
      when: not user_secrets_info.stat.exists

    - name: Checking existence of user_onpc_secrets.yml
      stat:
        path: "{{ osa_deploy_conf_path }}/user_onpc_secrets.yml"
      register: user_onpc_secrets_info

    - name: Copying template of user_onpc_secrets.yml
      copy:
        src: "{{ onpc_model_repo_dir }}/etc/openstack_deploy/user_onpc_secrets.yml"
        dest: "{{ osa_deploy_conf_path }}/user_onpc_secrets.yml"
        remote_src: yes
      when: not user_onpc_secrets_info.stat.exists

    - name: Generating any missing values in user_onpc_secrets
      command: "/opt/ansible-runtime/bin/python /opt/openstack-ansible/scripts/pw-token-gen.py --file {{ osa_deploy_conf_path }}/user_onpc_secrets.yml"
      changed_when: false
      when: not user_onpc_secrets_info.stat.exists

- hosts: osa-nodes

  tasks:

    - name: Retrieving facts
      setup:
      register: node_facts

- hosts: osa-master
  become: yes

  vars_files:
    - ../vars/osa-bridges-vlans_vars.yml

  vars_prompt:
    - name: "go_manual"
      prompt: >
        This playbook will roll over the installation of OpenNext end-to-end automatically
        unless you prefer to quit this playbook once the OSA master node setup is complete.
        Continuing the installation manually may be an better option if, for exemple,
        you'd like to run a specific playbook or limit the installation to a specific target.
        Would you like to go manual once the OSA master node setup is complete, yes or no ?:
      default: "no"
      private: no
  tasks:
    - fail:
        msg: "User prompt to go manual has an invalid value"
      when: go_manual | lower != 'yes' and go_manual | lower != 'no'

    - name: Setting remote OSA nodes informations facts (infos + IPs)
      set_fact:
        osa_nodes_infos: "{{ hostvars.get(inventory_hostname, {}).get('ansible_local', {}).get('opennext_osa_nodes_configure_system', {}) }}"
        vlans_ips: "{{ osa_vlans | selectattr('prefix', 'defined') | map(attribute='prefix') | flatten | list }}"

    - name: Setting remote OSA nodes informations facts (roles)
      set_fact:
        osa_nodes_roles: "{{ osa_nodes_infos.get('infra-master', {}).get('osa_nodes_roles', {}) }}"

    - name: Setting remote OSA nodes informations facts (hosts lists)
      set_fact:
        controller_hosts_list: "{% set sel = [] %}{% for k,v in osa_nodes_roles.items() %}{% if 'control' in v %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
        cinder_hosts_list: "{% set sel = [] %}{% for k,v in osa_nodes_roles.items() %}{% if 'storage' in v %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
        ceph_hosts_list: "{% set sel = [] %}{% for k,v in osa_nodes_roles.items() %}{% if 'ceph' in v %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
        compute_hosts_list: "{% set sel = [] %}{% for k,v in osa_nodes_roles.items() %}{% if 'compute' in v %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
        neutron_hosts_list: "{% set sel = [] %}{% for k,v in osa_nodes_roles.items() %}{% if 'network' in v %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
        monitoring_hosts_list: "{% set sel = [] %}{% for k,v in osa_nodes_roles.items() %}{% if 'monitoring' in v %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"
        logging_hosts_list: "{% set sel = [] %}{% for k,v in osa_nodes_roles.items() %}{% if 'logging' in v %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"

    - name: Setting remote OSA nodes informations facts (names)
      set_fact:
        osa_first_controller_node_name:  "{{ controller_hosts_list | sort | first }}"

    - name: Retrieving primary network interface
      set_fact:
        primary_net_itf: "{% set sel = [] %}{% for k in hostvars.get(osa_first_controller_node_name, {}).get('ansible_interfaces', []) %}{% if hostvars.get(osa_first_controller_node_name, {}).get('ansible_' + k | replace('-', '_'), {}).get('ipv4', {}).get('address', '') is match(ip_prefix + '\\..*') %}{% set l = sel.append(k) %}{% endif %}{% endfor %}{{ sel }}"

    - name: Setting VIP facts
      set_fact:
        external_public_vip_itf: "{{ primary_net_itf[0] }}"
        internal_public_vip_address: "{{ hostvars[osa_first_controller_node_name]['internal_public_vip_address'] }}"
        external_public_vip_address: "{{ hostvars[osa_first_controller_node_name]['external_public_vip_address'] }}"

    - name: Computing OSA deployment nodes facts
      set_fact:
        osa_deploy_hosts: "{{ osa_nodes_infos.get('infra-master', {}).get('groups', {}).get('osa-nodes', []) | difference(['master-osa']) | list }}"
        ip_reject_regex: "{{ '^' ~ ip_prefix ~ '.*' }}"
        osa_bridges_ips: "{{ vlans_ips | unique }}"

    - name: Computing OSA deployment nodes additional facts
      set_fact:
        osa_deploy_hosts_ips_infos: "{% set sel = [] %} {% for x in osa_deploy_hosts %} {% set l = sel.append(hostvars.get(x)) %}{% endfor %}{{ sel | selectattr('ansible_all_ipv4_addresses', 'defined') | map(attribute='ansible_all_ipv4_addresses') | flatten | reject('match', ip_reject_regex) | list | to_yaml }}"
        osa_bridges_ips_ranges: "{% set sel = [] %} {% for x in osa_bridges_ips %} {% set l = sel.append(x + '.1,' + x + '.50') %}{% endfor %}{{ sel | to_yaml }}"
        controller_hosts_l: "{% set sel = [] %} {% for x in controller_hosts_list %} {% set l = sel.append({'name': x, 'ip_v4': osa_nodes_infos.get(x).get('ansible_br_mgmt', hostvars[x]['ansible_br_mgmt'])['ipv4']['address']}) %}{% endfor %}{{ sel | list | to_yaml | from_yaml }}"
        cinder_hosts_l: "{% set sel = [] %} {% for x in cinder_hosts_list %} {% set l = sel.append({'name': x, 'ip_v4': osa_nodes_infos.get(x).get('ansible_br_mgmt', hostvars[x]['ansible_br_mgmt'])['ipv4']['address']}) %}{% endfor %}{{ sel | list | to_yaml | from_yaml }}"
        ceph_hosts_l: "{% set sel = [] %} {% for x in ceph_hosts_list %} {% set l = sel.append({'name': x, 'ip_v4': osa_nodes_infos.get(x).get('ansible_br_mgmt', hostvars[x]['ansible_br_mgmt'])['ipv4']['address']}) %}{% endfor %}{{ sel | list | to_yaml | from_yaml }}"
        compute_hosts_l: "{% set sel = [] %} {% for x in compute_hosts_list %} {% set l = sel.append({'name': x, 'ip_v4': osa_nodes_infos.get(x).get('ansible_br_mgmt', hostvars[x]['ansible_br_mgmt'])['ipv4']['address']}) %}{% endfor %}{{ sel | list | to_yaml | from_yaml }}"
        neutron_hosts_l: "{% set sel = [] %} {% for x in neutron_hosts_list %} {% set l = sel.append({'name': x, 'ip_v4': osa_nodes_infos.get(x).get('ansible_br_mgmt', hostvars[x]['ansible_br_mgmt'])['ipv4']['address']}) %}{% endfor %}{{ sel | list | to_yaml | from_yaml }}"
        monitoring_hosts_l: "{% set sel = [] %} {% for x in monitoring_hosts_list %} {% set l = sel.append({'name': x, 'ip_v4': osa_nodes_infos.get(x).get('ansible_br_mgmt', hostvars[x]['ansible_br_mgmt'])['ipv4']['address']}) %}{% endfor %}{{ sel | list | to_yaml | from_yaml }}"
        logging_hosts_l: "{% set sel = [] %} {% for x in logging_hosts_list %} {% set l = sel.append({'name': x, 'ip_v4': osa_nodes_infos.get(x).get('ansible_br_mgmt', hostvars[x]['ansible_br_mgmt'])['ipv4']['address']}) %}{% endfor %}{{ sel | list | to_yaml | from_yaml }}"

    - name: Setting final IPs facts
      set_fact:
        osa_ips: "{{ osa_deploy_hosts_ips_infos | from_yaml + osa_bridges_ips_ranges | from_yaml }}"

    - name: Setting final IP networks and hosts facts
      set_fact:
        osa_networks: "{% set sel = [] %} {% for x in osa_bridges_ips %} {% for y in osa_vlans %} {% if y.get('prefix', '') == x %}{% set l = sel.append(x ~ '.0/' ~ y.get('netmask', '255.255.255.0')) %}{% endif %}{% endfor %}{% endfor %}{{ sel | list | to_yaml }}"
        infrastructure_hosts: "{{ controller_hosts_l | from_yaml }}"
        controller_hosts: "{{ controller_hosts_l | from_yaml }}"
        lvm_iscsi_hosts: "{{ cinder_hosts_l | from_yaml }}"
        ceph_osd_hosts: "{{ ceph_hosts_l | from_yaml }}"
        compute_hosts: "{{ compute_hosts_l | from_yaml }}"
        neutron_hosts: "{{ controller_hosts_l | from_yaml }}"
        image_hosts: ["{{ cinder_hosts_l | from_yaml | first }}"]
        monitoring_hosts: "{{ monitoring_hosts_l | from_yaml }}"
        logging_hosts: "{{ logging_hosts_l | from_yaml }}"

    - name: Retrieving onpc-basic-model env.d templates
      find:
        paths: "{{ onpc_model_repo_dir }}/etc/openstack_deploy/templates/env.d"
        patterns: '^.*\.j2$'
        use_regex: yes
      register: onpc_model_envd_templates

    - include_tasks: ../tasks/remote_templating.yml
      vars:
        in_file: "{{ item }}"
        out_file: "{{ osa_deploy_conf_path }}/env.d/{{ (item | basename).split('.')[:-1] | join('.') }}"
      with_items: "{{ onpc_model_envd_templates.get('files', []) | map(attribute='path') | list }}"

    - name: Retrieving onpc-basic-model conf.d templates
      find:
        paths: "{{ onpc_model_repo_dir }}/etc/openstack_deploy/templates/conf.d"
        patterns: '^.*\.j2$'
        use_regex: yes
      register: onpc_model_confd_templates

    - include_tasks: ../tasks/remote_templating.yml
      vars:
        in_file: "{{ item }}"
        out_file: "{{ osa_deploy_conf_path }}/conf.d/{{ (item | basename).split('.')[:-1] | join('.') }}"
        monitoring_hosts: "{{ monitoring_hosts_l | from_yaml }}"
        logging_hosts: "{{ logging_hosts_l | from_yaml }}"
      with_items: "{{ onpc_model_confd_templates.get('files', []) | map(attribute='path') | list }}"

    - include_tasks: ../tasks/remote_templating.yml
      vars:
        in_file: "{{ onpc_model_repo_dir }}/etc/openstack_deploy/templates/openstack_user_config.yml.j2"
        out_file: "{{ osa_deploy_conf_path }}/openstack_user_config.yml"
        bootstrap_host_public_address: "{{ external_public_vip_address.split('/')[0] }}"
        internal_vip_address: "{{ internal_public_vip_address | ipaddr('address') }}"
        reserved_ips: "{{ osa_ips | merge_ip_addresses(osa_networks | from_yaml) }}"

    - name: Setting OpenNext facts
      set_fact:
        hapk_int_vip_cidr: "{{ internal_public_vip_address }}"
        hapk_ext_vip_cidr: "{{ external_public_vip_address }}/32"
        hapk_ext_itf: "{{ external_public_vip_itf }}"

    - include_tasks: ../tasks/remote_templating.yml
      vars:
        in_file: "{{ onpc_model_repo_dir }}/etc/openstack_deploy/templates/user_variables.yml.j2"
        out_file: "{{ osa_user_conf_file }}"
      when: not is_aio or ((force_networking | default(false) | bool) and (force_partitioning | default(false) | bool))

    - include_tasks: ../tasks/remote_templating.yml
      vars:
        in_file: "{{ onpc_model_repo_dir }}/etc/openstack_deploy/templates/user_onpc_variables.yml.j2"
        out_file: "{{ onpc_user_conf_file }}"

    - name: Setting facts for OSA user configuration file
      set_fact:
        osa_vars_additions: "{%- raw %}{{ lookup('template', '../templates/osa_additional_user_variables.yml.j2') }}{%- endraw %}"
        onpc_vars_additions: "{%- raw %}{{ lookup('template', '../templates/monitoring_additional_user_variables.yml.j2') }}{%- endraw %}"
        onpc_osa_user_config: {}
        onpc_onpc_user_config: "{%- raw %}{{ lookup('template', '/tmp/user_onpc_variables.yml.j2') }}{%- endraw %}"

    - name: Setting facts for OSA user configuration file
      set_fact:
        onpc_osa_user_config: "{%- raw %}{{ lookup('template', '/tmp/user_variables.yml.j2') }}{%- endraw %}"
      when: not is_aio or ((force_networking | default(false) | bool) and (force_partitioning | default(false) | bool))

    - name: Retrieving OSA user configuration from osa-master host
      slurp:
        src: "{{ osa_user_conf_file }}"
      register: osa_user_info

    - name: Setting fact for OSA user configuration contents
      set_fact:
        osa_user_config: "{{ osa_user_info['content'] | b64decode | from_yaml }}"

    - name: Storing new {{ osa_user_conf_file }} on osa-master host
      copy:
        dest: "{{ osa_user_conf_file }}"
        content: "{{ osa_user_config | combine(onpc_osa_user_config | from_yaml) | combine(osa_vars_additions | from_yaml) | to_nice_yaml(indent=4) }}"
        backup: yes
        owner: root
        group: root
        mode: 0644

    - name: Retrieving Monitoring user configuration from osa-master host
      slurp:
        src: "{{ onpc_user_conf_file }}"
      register: onpc_user_info

    - name: Setting fact for Monitoring user configuration contents
      set_fact:
        onpc_user_config: "{{ onpc_user_info['content'] | b64decode | from_yaml }}"

    - name: Storing new {{ onpc_user_conf_file }} on osa-master host
      copy:
        dest: "{{ onpc_user_conf_file }}"
        content: "{{ onpc_user_config | combine(onpc_onpc_user_config | from_yaml) | combine(onpc_vars_additions | from_yaml) | to_nice_yaml(indent=4) }}"
        backup: yes
        owner: root
        group: root
        mode: 0644

    ## Quit the playbook here if user decide to go manual
    - name: Quit if user choice is to go manual
      meta: end_play
      when: go_manual | lower == 'yes'

    - name: Adding OSA final deployment script
      copy:
        src: ../files/osa_run_playbooks.sh
        dest: /opt/osa_run_playbooks.sh
        owner: root
        group: root
        mode: 0755

    - name: Adding ONPC Ansible roles retrieval script
      copy:
        src: ../files/onpc_get_roles.sh
        dest: /opt/onpc_get_roles.sh
        owner: root
        group: root
        mode: 0755

    - name: Adding ONPC final deployment script
      copy:
        src: ../files/onpc_run_playbooks.sh
        dest: /opt/onpc_run_playbooks.sh
        owner: root
        group: root
        mode: 0755

    - name: Executing OSA final deployment script
      shell: /opt/osa_run_playbooks.sh
      args:
        creates: /opt/.osa_playbooks_done
        executable: /bin/bash

    - name: Executing Ansible roles retrieval script
      shell: /opt/onpc_get_roles.sh
      args:
        creates: /opt/.onpc_roles_done
        executable: /bin/bash
      environment: "{{ proxy_env | default('{}') }}"

    - name: Executing ONPC final deployment script
      shell: /opt/onpc_run_playbooks.sh
      args:
        creates: /opt/.onpc_playbooks_done
        executable: /bin/bash

    - include_tasks: ../tasks/store_facts.yml facts_file="opennext_osa_master_opennext_deploy"
      vars:
        keys_to_store:
          - "^osa_deploy_hosts$"
          - "^osa_bridges_ips$"
          - "^controller_hosts$"
          - "^cinder_hosts$"
          - "^compute_hosts$"
          - "^osa_deploy_hosts_ips_infos$"
          - "^osa_bridges_ips_ranges$"
          - "^controller_hosts_ips_l$"
          - "^cinder_hosts_ips_l$"
          - "^compute_hosts_ips_l$"
          - "^osa_ips$"

- hosts: infra-master
  become: yes

  tasks:

    - include_tasks: ../tasks/store_facts.yml facts_file="opennext_osa_master_opennext_deploy"
      vars:
        keys_to_store:
          - "^osa_deploy_hosts$"
          - "^osa_bridges_ips$"
          - "^controller_hosts$"
          - "^cinder_hosts$"
          - "^compute_hosts$"
          - "^osa_deploy_hosts_ips_infos$"
          - "^osa_bridges_ips_ranges$"
          - "^controller_hosts_ips_l$"
          - "^cinder_hosts_ips_l$"
          - "^compute_hosts_ips_l$"
          - "^osa_ips$"
